
#deffunc DrawParticle int _alpha,int _hwnd,int _width,int _height,int _margin,int _posy,int _speed
	dim partPosX:dim partMoveSpeed:partMoveSpeed=_speed
	repeat
		SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,_alpha
		DrawGraph partPosX-SceneCount*partMoveSpeed,_posy,_hwnd,TRUE
		DrawGraph partPosX-SceneCount*partMoveSpeed,DispHeight-_posy-_height,_hwnd,TRUE
		partPosX+_width+_margin
		if partPosX-SceneCount*partMoveSpeed>DispWidth :break
	loop

	return

#deffunc SetHitObjDefaultPreset int _id
	hitSoundFlag(_id)=FALSE
	hitJudgeFlag(_id)=FALSE
	hitCountFlag(_id)=FALSE
	hitobjBPM(_id)=0.0
	return

#defcfunc ConvKeyIDtoLaneID int _id
	if _id==0 :return 0
	if _id==1 :return 1
	if _id==2 :return 1
	if _id==3 :return 2
	return

#deffunc UpdateJudgeValue int _id
	switch _id
		case JUDGE_RES_EMPTY:return:swbreak
		case JUDGE_RES_MISS
			numMiss++
			curCombo=0
		swbreak
		case JUDGE_RES_BAD
			numBad++
			curCombo=0
		swbreak
		case JUDGE_RES_NICE
			numNice++
			curCombo++
		swbreak
		case JUDGE_RES_GREAT
			numGreat++
			curCombo++
		swbreak
		case JUDGE_RES_EXCELLENT
			numExcellent++
			curCombo++
			if hitCount==0 :curScore+bonusScore
			hitCount++
		swbreak
	swend

	gosub*SetComboBurst

	if curMaxCombo<curCombo :curMaxCombo=curCombo

	//ゲージ加算
		curGaugeVal+gaugeAmount(_id)
		if curGaugeVal>100.0 :curGaugeVal=100.0
		if curGaugeVal<0.0 :curGaugeVal=0.0

	//スコア加算
		ScoreEaseA=curScore
		curScore+hitScore(_id)
		ScoreEaseB=curScore

	JudgeRes=_id
	JudgeResCount=0

	return

#defcfunc GetJudgeName int _id
	switch _id
		case JUDGE_RES_MISS:return"MISS":swbreak
		case JUDGE_RES_BAD:return"BAD":swbreak
		case JUDGE_RES_NICE:return"NICE":swbreak
		case JUDGE_RES_GREAT:return"GREAT":swbreak
		case JUDGE_RES_EXCELLENT:return"EXCELLENT":swbreak
	swend
	return"EMPTY"

#defcfunc GetNumJudge int _id
	switch _id
		case JUDGE_RES_MISS:return numMiss:swbreak
		case JUDGE_RES_BAD:return numBad:swbreak
		case JUDGE_RES_NICE:return numNice:swbreak
		case JUDGE_RES_GREAT:return numGreat:swbreak
		case JUDGE_RES_EXCELLENT:return numExcellent:swbreak
	swend
	return


	return

*LoadChart

	AddDebugConsole STYLE_NORMAL,"譜面ファイルの読み込みを開始"

	//譜面ファイルの読み込み
	sdim chartPath
	chartPath="Data/"+chartFileName+".dat"
	exist chartPath
	if strsize==-1 {
		//ファイルの読み込みエラー
		return -1
	}
	sdim chartBuf,strsize
	notesel chartBuf
	noteload chartPath

	//改行コードを判別
	if id_crlf(chartBuf)!0 {
		AddDebugConsole STYLE_WARNING,"非対応の改行コードを変換しました"
		conv_crlf chartBuf,0
	}

	dim chartNoteMax	//最大行数
	chartNoteMax=notemax
	sdim chartNoteLine	//解析する行の文字列データ
	sdim chartCmdName	//コマンド名
	sdim chartCmdPrm	//コマンドパラメータ
	sdim chartDivPrm	//コマンドパラメータ（配列）
	sdim chartProgErr	//エラー発生フラグ
	chartProgErr=FALSE

	dim chartDefVersion,3	//譜面ファイルの定義バージョン

	sdim chartTitle		//タイトル
	sdim chartSubTitle		//サブタイトル
	sdim chartArtist		//アーティスト
	sdim chartSource		//提供元
	sdim chartLicense		//ライセンス表記
	ddim chartDefBPM,1		//既定のBPM値
	dim chartBGMoffset		//BGMの再生オフセット
	dim chartMOVIEoffset	//ムービーのオフセット
	dim chartMOVIEposX		//ムービーの表示位置X
	dim chartMOVIEposy		//ムービーの表示位置Y
	dim chartMOVIEwidth		//ムービーの横幅
	dim chartMOVIEheight	//ムービーの高さ
	dim chartMOVIEalpha		//ムービーの不透明度
	sdim chartBackground	//背景
	sdim chartResIndex		//リソースの識別子
	sdim chartDifficulty	//難易度（区分）
	dim chartLevel			//難易度（数値）
	dim chartobjOffset		//オブジェクトのオフセット

	dim hitobjTiming	//タイミング
	dim hitobjLength	//長さ
	dim hitobjLaneID	//レーンID
	dim hitobjSoundID	//サウンドID
	dim hitobjSoundVol	//サウンドの音量
	dim hitobjType		//種類(0=通常,1=ホールド)
	ddim hitobjBPM,1		//BPM値
	dim hitobjMax		//オブジェクト最大数
	dim hitSoundFlag	//サウンドを鳴らしたフラグ
	dim hitJudgeFlag	//判定済みフラグ
	dim hitCountFlag	//判定ラインに触れたフラグ

	dim bpmpointTiming	//BPM定義地点の位置
	ddim bpmpointValue,1//BPM定義地点の値
	dim bpmpointMax	//BPM定義地点の最大数

	dim lyricsTiming	//歌詞の位置
	dim lyricsString	//歌詞の文字列
	dim lyricsMax		//歌詞の最大数

	repeat chartNoteMax
		noteget chartNoteLine,cnt
		if strmid(chartNoteLine,0,1)=="#" {	//接頭語からコマンド行を判別
			split chartNoteLine,":",chartCmdName,chartCmdPrm
			split chartCmdPrm,",",chartDivPrm

			//コマンド別処理
			switch chartCmdName
				case"#FORMAT"		//シグネチャ
					if chartCmdPrm!"chart.xoda" {
						chartProgErr=TRUE
					}
				swbreak
				case"#VERSION"		//定義バージョン
					split chartCmdPrm,".",chartDefVersion
				swbreak

				case"#TITLE"		//タイトル
					chartTitle=chartCmdPrm
				swbreak
				case"#SUBTITLE"	//サブタイトル
					chartSubTitle=chartCmdPrm
				swbreak
				case"#ARTIST"		//アーティスト
					chartArtist=chartCmdPrm
				swbreak
				case"#SOURCE"		//提供元
					chartSource=chartCmdPrm
				swbreak
				case"#LICENSE"		//ライセンス表記
					chartLicense=chartCmdPrm
				swbreak
				case"#DEFBPM"		//既定のBPM値
					chartDefBPM=double(chartCmdPrm)
				swbreak
				case"#BGMOFFSET"	//BGMのオフセット値
					chartBGMoffset=int(chartCmdPrm)
				swbreak
				case"#MOVIEOFFSET"	//ムービーのオフセット値
					chartMOVIEoffset=int(chartCmdPrm)
				swbreak
				case"#MOVIEADV"	//ムービーの追加設定
					//追加設定で位置やサイズを指定された場合はそれに従い、
					//未指定の場合は、上部に短形変形した状態で表示
					chartMOVIEposX=int(chartDivPrm(0))
					chartMOVIEposY=int(chartDivPrm(1))
					chartMOVIEwidth=int(chartDivPrm(2))
					chartMOVIEheight=int(chartDivPrm(3))
					chartMOVIEalpha=int(chartDivPrm(4))
				swbreak
				case"#BACKGROUND"	//背景の種類
					chartBackground=chartCmdPrm
				swbreak
				case"#INDEX"		//リソースの識別子
					chartResIndex=chartCmdPrm
				swbreak
				case"#OBJOFFSET"	//オブジェクトのオフセット値
					chartobjOffset=int(chartCmdPrm)
				swbreak

				case"#DIFFICULTY"	//難易度（区分）
					chartDifficulty=chartCmdPrm
				swbreak
				case"#LEVEL"		//難易度（数値）
					chartLevel=int(chartCmdPrm)
				swbreak

				case"#SETBPM"	//BPM定義
					bpmpointTiming(bpmpointMax)=int(chartDivPrm(0))
					bpmpointValue(bpmpointMax)=double(chartDivPrm(1))
					bpmpointMax++
				swbreak

				case"#OBJ"		//オブジェクト
					hitobjTiming(hitobjMax)=int(chartDivPrm(0))+chartobjOffset
					hitobjLaneID(hitobjMax)=int(chartDivPrm(1))
					hitobjSoundID(hitobjMax)=int(chartDivPrm(2))
					hitobjSoundVol(hitobjMax)=int(chartDivPrm(3))
					hitobjLength(hitobjMax)=0
					hitobjType(hitobjMax)=HITOBJ_NORMAL
					SetHitObjDefaultPreset hitobjMax
					hitobjMax++
				swbreak
				case"#HOLD.START"		//ホールドオブジェクト（始点）
					hitobjTiming(hitobjMax)=int(chartDivPrm(0))+chartobjOffset
					hitobjLaneID(hitobjMax)=int(chartDivPrm(1))
					hitobjSoundID(hitobjMax)=int(chartDivPrm(2))
					hitobjSoundVol(hitobjMax)=int(chartDivPrm(3))
					hitobjLength(hitobjMax)=int(chartDivPrm(4))
					hitobjType(hitobjMax)=HITOBJ_HOLDSTART
					SetHitObjDefaultPreset hitobjMax
					hitobjMax++
				swbreak
				case"#HOLD.END"		//ホールドオブジェクト（終点）
					hitobjTiming(hitobjMax)=int(chartDivPrm(0))+chartobjOffset
					hitobjLaneID(hitobjMax)=int(chartDivPrm(1))
					hitobjSoundID(hitobjMax)=int(chartDivPrm(2))
					hitobjSoundVol(hitobjMax)=int(chartDivPrm(3))
					hitobjLength(hitobjMax)=0
					hitobjType(hitobjMax)=HITOBJ_HOLDEND
					SetHitObjDefaultPreset hitobjMax
					hitobjMax++
				swbreak

				case"#LYRICS"			//歌詞
					lyricsTiming(lyricsMax)=int(chartDivPrm(0))
					strrep chartDivPrm(1),"*com",","	//置換
					lyricsString(lyricsMax)=chartDivPrm(1)
					lyricsMax++
				swbreak
			swend
		}

		if chartProgErr==TRUE :break
	loop

	//譜面ファイルのバージョンを照合
	dim VerErrFlag:VerErrFlag=FALSE
	if chartDefVersion(0)!BuildVersion_Major {		//メジャーバージョン
		VerErrFlag=TRUE
	}
	if chartDefVersion(1)!BuildVersion_Minor {		//マイナーバージョン
		VerErrFlag=TRUE
	}
	if VerErrFlag==TRUE {
		AddDebugConsole STYLE_ERROR,"非対応のバージョンの譜面ファイルです。"
		goto*StopError
	}

	if chartProgErr==TRUE {
		//解析中のエラー
		AddDebugConsole STYLE_ERROR,"譜面ファイルの解析に失敗しました。"
		goto*StopError
	}

	//楽曲情報のバッファを生成
	alCreateImage i2D_SongInfo,360,150
		alColor 15,15,15:alFont"Noto Sans CJK JP Medium",16
		alDrawText chartTitle,30,24,360-45,150-20,0,0
		alColor 30,30,30:alFont"Noto Sans CJK JP Regular",14
		alDrawText chartArtist,40,62,360-45,150-60,0,0
		alColor 50,50,50:alFont"Pier Sans",14
		alDrawText chartDifficulty+" Lv."+chartLevel,45,104,360-45,150-104,0,0

	if hdximg(iUI_tx_SongInfo)!0 :DeleteGraph hdximg(iUI_tx_SongInfo)
	hdximg(iUI_tx_SongInfo)=MakeScreen(360,150,TRUE)
	alCopyImageToDXBuf i2D_SongInfo,hdximg(iUI_tx_SongInfo)

	//音源読み込み
	dim hplaybgm:dim hplayfx
	hplaybgm=BASS_StreamCreateFile(FALSE,"Data/Package/"+chartResIndex+"/Audio.mp3",0,0,0,0,BASS_STREAM_AUTOFREE)
	BASS_ChannelSetAttribute hplaybgm,BASS_ATTRIB_VOL,tofloat(0.5)
	RegAudioLib TYPE_BGM,"Data/Package/"+chartResIndex+"/Audio.mp3"
	hplayfx=SetAudioFXtohandle(hplaybgm,aqFxid)

	//ムービー読み込み
	exist"Data/Package/"+chartResIndex+"/Background.ogv"
	if strsize!-1 {
		if hdximg(iPlay_bg_Movie)!0 :DeleteGraph hdximg(iPlay_bg_Movie)
		hdximg(iPlay_bg_Movie)=LoadGraph("Data/Package/"+chartResIndex+"/Background.ogv")
	}

	//ゲージ関係
	ddim tmpGaugeTotal,1:ddim gaugeAmount,6
	tmpGaugeTotal=7.605*double(hitobjMax)/(0.01*double(hitobjMax)+6.5)
	switch aqPlayOption(ID_GaugeLevel)
		case GAUGE_ASSIST
			gaugeAmount(JUDGE_RES_EMPTY)=0.0
			gaugeAmount(JUDGE_RES_EXCELLENT)=tmpGaugeTotal/double(hitobjMax)*1.5
			gaugeAmount(JUDGE_RES_GREAT)=gaugeAmount(JUDGE_RES_EXCELLENT)*0.5
			gaugeAmount(JUDGE_RES_NICE)=gaugeAmount(JUDGE_RES_EXCELLENT)*0.1
			gaugeAmount(JUDGE_RES_BAD)=-1.0
			gaugeAmount(JUDGE_RES_MISS)=-1.5
		swbreak
		case GAUGE_NORMAL
			gaugeAmount(JUDGE_RES_EMPTY)=0.0
			gaugeAmount(JUDGE_RES_EXCELLENT)=tmpGaugeTotal/double(hitobjMax)
			gaugeAmount(JUDGE_RES_GREAT)=gaugeAmount(JUDGE_RES_EXCELLENT)*0.5
			gaugeAmount(JUDGE_RES_NICE)=0.0
			gaugeAmount(JUDGE_RES_BAD)=-1.5
			gaugeAmount(JUDGE_RES_MISS)=-3.0
		swbreak
		case GAUGE_HARD
			gaugeAmount(JUDGE_RES_EMPTY)=0.0
			gaugeAmount(JUDGE_RES_EXCELLENT)=tmpGaugeTotal/double(hitobjMax)
			gaugeAmount(JUDGE_RES_GREAT)=gaugeAmount(JUDGE_RES_EXCELLENT)*0.5
			gaugeAmount(JUDGE_RES_NICE)=0.0
			gaugeAmount(JUDGE_RES_BAD)=-2.5
			gaugeAmount(JUDGE_RES_MISS)=-5.0
		swbreak
		case GAUGE_MADNESS
			gaugeAmount(JUDGE_RES_EMPTY)=0.0
			gaugeAmount(JUDGE_RES_EXCELLENT)=tmpGaugeTotal/double(hitobjMax)
			gaugeAmount(JUDGE_RES_GREAT)=gaugeAmount(JUDGE_RES_EXCELLENT)*0.5
			gaugeAmount(JUDGE_RES_NICE)=0.0
			gaugeAmount(JUDGE_RES_BAD)=-5.0
			gaugeAmount(JUDGE_RES_MISS)=-10.0
		swbreak
	swend

	//BPM情報解析
	dim ProgObjID
	repeat hitobjMax
		ProgObjID=cnt
		if chartDefBPM!0.0 {
			//既定のBPM値を設定
			hitobjBPM(ProgObjID)=chartDefBPM
		}
		repeat bpmpointMax
			if hitobjTiming(ProgObjID)>=bpmpointTiming(cnt) {
				hitobjBPM(ProgObjID)=bpmpointValue(cnt)
			}
		loop
	loop

	//オフセット秒数(ms)
	dim JudgeOffsetMS
	JudgeOffsetMS=int(double(-50+aqPlayOption(ID_JudgeOffset))*(1000.0/60.0))

	//オフセット適用
	repeat hitobjmax
		hitobjTiming(cnt)+JudgeOffsetMS
	loop

	//ヒット位置設定
	ddim hitobjPosition,hitobjMax
	ddim tmpobjPosition,hitobjMax
	dim hitobjDrawPos,hitobjMax
	repeat hitobjMax
		if cnt==0 {
			hitobjPosition(cnt)=tmpobjPosition-(double(hitobjTiming(cnt)+1000*5)*hitobjBPM(cnt)/1000.0)
		} else {
			hitobjPosition(cnt)=tmpobjPosition-(double(hitobjTiming(cnt)-hitobjTiming(cnt-1))*hitobjBPM(cnt)/1000.0)
		}
		tmpobjPosition=hitobjPosition(cnt)
	loop

	//スコア関連の初期化
	dim hitScore,6
	dim bonusScore
	hitScore(JUDGE_RES_EMPTY)=0
	hitScore(JUDGE_RES_EXCELLENT)=10000000/hitobjMax
	hitScore(JUDGE_RES_GREAT)=hitScore(JUDGE_RES_EXCELLENT)/2
	hitScore(JUDGE_RES_NICE)=hitScore(JUDGE_RES_EXCELLENT)/4
	hitScore(JUDGE_RES_BAD)=hitScore(JUDGE_RES_EXCELLENT)/8
	hitScore(JUDGE_RES_MISS)=0
	bonusScore=10000000\hitobjMax

	AddDebugConsole STYLE_NORMAL,"譜面ファイルの読み込み完了"
	AddDebugConsole STYLE_STATUS,"TITLE = "+chartTitle
	AddDebugConsole STYLE_STATUS,"ARTIST = "+chartArtist
	AddDebugConsole STYLE_STATUS,"DEFAULT.BPM = "+chartDefBPM
	AddDebugConsole STYLE_STATUS,"OBJECT = "+hitobjMax

	//外部スクリプト読み込み
	ExScript_Init"Data/Background.dat",chartBackground

	//グラフのキャプチャー地点を算出
	dim chartLength		//曲の長さ
	dim chartCapturePt		//キャプチャー地点の間隔
	dim chartCaptureVal,270	//キャプチャー地点の値
	chartLength=hitobjTiming(hitobjMax-1)
	chartCapturePt=int(double(chartLength)/270.0)

	//オブジェクトの配置変更
	if aqPlayOption(ID_ObjPlacement)==1 {	//MIRROR
		repeat hitobjMax
			switch hitobjLaneID(cnt)
				case 0:hitobjLaneID(cnt)=2:swbreak
				case 2:hitobjLaneID(cnt)=0:swbreak
			swend
		loop
	}
	if aqPlayOption(ID_ObjPlacement)==2 {	//RANDOM
		//012 (NORMAL)
		//021
		//120
		//102
		//201
		//210 (MIRROR)
		dim rndLaneID,4,3
		rndLaneID(0,0)=0:rndLaneID(0,1)=2:rndLaneID(0,2)=1
		rndLaneID(1,0)=1:rndLaneID(1,1)=2:rndLaneID(1,2)=0
		rndLaneID(2,0)=1:rndLaneID(2,1)=0:rndLaneID(2,2)=2
		rndLaneID(3,0)=2:rndLaneID(3,1)=0:rndLaneID(3,2)=1
		dim rndTable:rndTable=rnd(4)
		repeat hitobjMax
			hitobjLaneID(cnt)=rndLaneID(rndTable,hitobjLaneID(cnt))
		loop
	}
	if aqPlayOption(ID_ObjPlacement)==3 {	//ALL-RANDOM
		dim objcurCount
		dim longcurCount
		dim resetobjFlag
		dim objLongStartms:dim objLongEndms:dim objLongLaneID:dim objLongCount
		objLongStartms=-1:objLongEndms=-1
		repeat
			resetobjFlag=FALSE
			hitobjLaneID(objcurCount)=rnd(3)
			if hitobjType(objcurCount)==HITOBJ_HOLDEND {
				hitobjLaneID(objcurCount)=hitobjLaneID(objcurCount-1)
			} else {
				//ロング被り
					repeat hitobjMax
						if cnt==objcurCount :continue		//自分自身は除外
						if hitobjType(cnt)==HITOBJ_HOLDSTART {
							if hitobjTiming(objcurCount)>=hitobjTiming(cnt)&hitobjTiming(objcurCount)<=hitobjTiming(cnt)+hitobjLength(cnt) {
								if hitobjLaneID(cnt)==hitobjLaneID(objcurCount) {
									resetobjFlag=TRUE
								}
							}
						}
					loop
				//タイミング被り
					repeat hitobjMax
						if cnt==objcurCount :continue		//自分自身は除外
						if hitobjTiming(cnt)==hitobjTiming(objcurCount) {
							if hitobjLaneID(cnt)==hitobjLaneID(objcurCount) {
								resetobjFlag=TRUE
							}
						}
					loop
				if resetobjFlag==TRUE :continue
			}
			objcurCount++
			if objcurCount==hitobjMax :break
		loop
	}

	return 0

*Scene_Init_Play

	AddDebugConsole STYLE_NORMAL,"プレイ画面の初期化開始"

	//ゲージの種類
	dim GaugeType
	GaugeType=aqPlayOption(ID_GaugeLevel)
	//現在のゲージ数値
	ddim curGaugeVal,1
	curGaugeVal=0.0
		switch GaugeType
			case GAUGE_ASSIST:curGaugeVal=20.0:swbreak
			case GAUGE_NORMAL:curGaugeVal=0.0:swbreak
			case GAUGE_HARD:curGaugeVal=100.0:swbreak
			case GAUGE_MADNESS:curGaugeVal=100.0:swbreak
		swend
	//現在のBPM値
	ddim curBPM,1
	//最大コンボ
	dim curMaxCombo
	//白線パーティクル
	dim partline_PosX
	dim partline_PosY
	dim partline_Speed
	dim partline_Max
	dim partline_Flag
	//フェードパーティクル
	dim partfade_PosX
	dim partfade_Max
	dim partfade_Flag

	//背景スクロール位置X
	dim bgScrollX

	//ムービー使用フラグ
	dim bgMovieFlag
	bgMovieFlag=TRUE

	//ムービー再生済みフラグ
	dim MoviePlayFlag
	//音源再生済みフラグ
	dim BGMPlayFlag

	//経過時間
	dim PlayStartMS
	dim PlayCountMS
	PlayCountMS=-1000*5

	//歌詞表示フラグ
	sdim bframeLyrics
	dim updateLyricsCount

	//ユーザー指定スピード値
	ddim AddSpeed,1
	AddSpeed=0.5+double(aqPlayOption(ID_ObjSpeed))*0.1
	AddSpeed=AddSpeed*2.0	//補正

	//判定するフラグ
	dim JudgeFlag,3
	dim JudgeKeyFlag,4
	dim JudgebfKeyFlag,4
	dim LaneEffCount,3
	dim HoldFlag,3
	dim HoldNoteID,3
	dim HoldCount,3

	//コンボ
	dim curCombo

	//判定
	dim numMiss
	dim numBad
	dim numNice
	dim numGreat
	dim numExcellent
	dim numEarly
	dim numLate
	dim JudgeRes
	dim JudgeResCount
	dim BombCount,3
	dim BombFlag,3

	//デバッグ
	dim AutoPlayFlag
	AutoPlayFlag=false

	//コンボバースト
	dim hcbDraw
	dim comboBurstCount
	hcbDraw=-1

	//現在のスコア
	dim curScore
	dim mxmScore
	dim hitCount
	dim ScoreEaseA
	dim ScoreEaseB
	dim ScoreEaseVal

	//デバッグキー
	dim DebugKeyFlag,12
	dim DebugbfKeyFlag,12

	//クリア演出フラグ
	dim stgClearEffFlag
	dim stgClearEffCount
	stgClearEffFlag=FALSE

	//キーサウンド音量
	BASS_ChannelSetAttribute hbasssnd(sndHitobj),BASS_ATTRIB_VOL,tofloat(double(aqPlayOption(ID_KeySndVolume))/10.0)
	BASS_ChannelSetAttribute hbasssnd(sndHitempty),BASS_ATTRIB_VOL,tofloat(double(aqPlayOption(ID_KeySndVolume))/10.0)

	AddDebugConsole STYLE_NORMAL,"プレイ画面の初期化完了"
	return

*SetComboBurst
	if curCombo==50 :hcbDraw=hdximg(iBurst_Combo_x50):comboBurstCount=0
	if curCombo==100 :hcbDraw=hdximg(iBurst_Combo_x100):comboBurstCount=0
	if curCombo==200 :hcbDraw=hdximg(iBurst_Combo_x200):comboBurstCount=0
	if curCombo==300 :hcbDraw=hdximg(iBurst_Combo_x300):comboBurstCount=0
	if curCombo==400 :hcbDraw=hdximg(iBurst_Combo_x400):comboBurstCount=0
	if curCombo==500 :hcbDraw=hdximg(iBurst_Combo_x500):comboBurstCount=0
	if curCombo==600 :hcbDraw=hdximg(iBurst_Combo_x600):comboBurstCount=0
	if curCombo==700 :hcbDraw=hdximg(iBurst_Combo_x700):comboBurstCount=0
	if curCombo==800 :hcbDraw=hdximg(iBurst_Combo_x800):comboBurstCount=0
	if curCombo==900 :hcbDraw=hdximg(iBurst_Combo_x900):comboBurstCount=0
	if curCombo==1000 :hcbDraw=hdximg(iBurst_Combo_x1000):comboBurstCount=0

	return