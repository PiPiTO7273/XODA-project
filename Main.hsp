
//  __   __  _______  ______   _______             _______  ______   _______      ___  _______  _______  _______
// |  |_|  ||       ||      | |   _   |           |       ||    _ | |       |    |   ||       ||       ||       |
// |       ||   _   ||  _    ||  |_|  |   ____    |    _  ||   | || |   _   |    |   ||    ___||       ||_     _|
// |       ||  | |  || | |   ||       |  |____|   |   |_| ||   |_|| |  | |  |    |   ||   |___ |       |  |   |
//  |     | |  |_|  || |_|   ||       |           |    ___||    __ ||  |_|  |    |   ||    ___||      _|  |   |
// |   _   ||       ||       ||   _   |           |   |    |   |  |||       |   |    ||   |___ |     |_   |   |
// |__| |__||_______||______| |__| |__|           |___|    |___|  |||_______|   |____||_______||_______|  |___|

//(c) 2019-2021 PiPiTO Software.

//Official Webpage		https://pipito7273.github.io/
//Github Repository		https://github.com/PiPiTO7273/XODA-project
//Contact				pipito7273@gmail.com

//	-	ソースコードはオープンソース化されていますが、セキュリティ上の問題がある情報（サーバーに接続するユーザー名やパスワード）は
//		外部のソースコードにマクロとして定義されています。これらの情報が欠損している場合でも起動は可能ですが、全ての機能は利用できません。
//		全ての機能をテスト、デバッグするには開発メンバーに連絡し、該当のファイル"AdminKey.hsp"を入手してください。

//	-	開発メンバーの方へ
//		Portalアカウントに接続する際、以下のアカウントを使用してください。
//		ユーザー名	:	devuser
//		パスワード	:	password

#packopt hide 1

//----- モジュール -----
#include"hsp3utf.as"				//UTF-8対応ランタイム
#include"a2dp.hsp"					//Artlet2D + Artlet2D Plus
#include"DxLib.as"					//DXライブラリ
#include"mod_dxlibplus.hsp"			//DXライブラリ拡張モジュール
#include"bass.as"					//BASS Audio Library
#include"hspinet.as"				//hspinet プラグイン
#include"gm_crlf.hsp"				//改行コード変換モジュール
#include"llmod3/llmod3.hsp"			//llmod3基本モジュール
#include"llmod3/console.hsp"			//llmod3コンソール機能モジュール
#include"getProcess.hsp"				//プロセス一覧取得モジュール
#include"hspext.as"					//hspext プラグイン
#addition"AdminKey.hsp"				//セキュリティキー
#include"Symbol.hsp"				//マクロ定義
#include"Function_Default.hsp"		//基本命令・関数
#include"Function_MusicSelect.hsp"		//楽曲選択画面の命令・関数
#include"Function_Play.hsp"			//ゲームプレイ画面の命令・関数
#include"LoadResources.hsp"			//リソース処理関連のサブルーチン
#include"Scene_Splash.hsp"			//スプラッシュ（起動時の待機画面）
#include"Scene_Signin.hsp"			//サインイン
#include"Scene_ModeSelect.hsp"		//モード選択
#include"Scene_MusicSelect.hsp"		//楽曲選択
#include"Scene_Play.hsp"				//ゲームプレイ
#include"Scene_Result.hsp"			//リザルト

//----- 起動開始 -----
*Startup

	#if DebugConsoleWindow
		gsel 0,-1
		exist"Main.ax"
		if strsize!-1 {
			delete"Main.ax"
		}
		console
	#endif

	sdim ConsoleLogBuf

	//起動時のアスキーアート
	AddDebugConsole STYLE_COMMENT,"  __   __  _______  ______   _______ "
	AddDebugConsole STYLE_COMMENT," |  |_|  ||       ||      | |   _   |"
	AddDebugConsole STYLE_COMMENT," |       ||   _   ||  _    ||  |_|  |"
	AddDebugConsole STYLE_COMMENT," |       ||  | |  || | |   ||       |    XODA-Project"
	AddDebugConsole STYLE_COMMENT,"  |     | |  |_|  || |_|   ||       |    (c) 2019-"+gettime(0)+" PiPiTO Software."
	AddDebugConsole STYLE_COMMENT," |   _   ||       ||       ||   _   |"
	AddDebugConsole STYLE_COMMENT," |__| |__||_______||______| |__| |__|"
	AddDebugConsole STYLE_COMMENT,""
	AddDebugConsole STYLE_COMMENT,"::::::::::::::::::::::::::::::::::::: :::: ::: :: :  :   :    :\n\n"

	AddDebugConsole STYLE_NORMAL,"Startup..."

	AddDebugConsole STYLE_STATUS,"DISPLAY.WIDTH = "+DispWidth
	AddDebugConsole STYLE_STATUS,"DISPLAY.HEIGHT = "+DispHeight
	AddDebugConsole STYLE_STATUS,"BUILD.VERSION = "+BuildVersion_Major+"."+BuildVersion_Minor
	AddDebugConsole STYLE_STATUS,"SERVICE.HOST = "+RepHiddenWords(str(SERVICE_HTTP),"*")
	AddDebugConsole STYLE_STATUS,"SERVICE.KEY = "+RepHiddenWords(str(SERVICE_ENCKEY),"*")
	AddDebugConsole STYLE_NORMAL,"起動設定の読み込み完了"

	//DXライブラリ初期化
	AddDebugConsole STYLE_NORMAL,"DXライブラリの初期化開始"
	SetOutApplicationLogValidFlag 0
	screen 0,DispWidth,DispHeight,0,ginfo(20)/2-DispWidth/2,ginfo(21)/2-DispHeight/2

	//初期画面
		color:boxf
		pos 0,0:picload"Data/Image/bg_Boot.png",1

	//DXライブラリ初期設定
		SetUserWindow hwnd
		SetMainWindowText"XODA v"+BuildVersion_Major+"."+BuildVersion_Minor
		ChangeWindowMode TRUE
		SetGraphMode DispWidth,DispHeight,32
		SetAlwaysRunFlag TRUE
		SetWaitVSyncFlag TRUE
		dxlib_Init
		if stat==-1 {
			AddDebugConsole STYLE_ERROR,"DXライブラリの初期化に失敗しました。"
			goto*StopError
		} else {
			AddDebugConsole STYLE_NORMAL,"DXライブラリの初期化完了"
		}
		SetDrawBlendMode DX_BLENDMODE_ALPHA,256
		LoadGraphScreen 0,0,"Data/Image/bg_Boot.png",TRUE
		wait 10
	onexit*Exit

	//BASS初期化
	BASS_Init -1,44100,0,hwnd,0
	if stat==0 {
		AddDebugConsole STYLE_ERROR,"BASS Audio Libraryの初期化に失敗しました。"
	} else {
		AddDebugConsole STYLE_NORMAL,"BASS Audio Libraryの初期化完了"
	}

	//オンラインアップデート
	dim OfflineModeFlag
	WebAPI_Init 1
	netinit
	gosub*CheckOnlineUpdate

	//各種読み込み処理
	gosub*LoadSoundEffects
	gosub*LoadFontData
	gosub*LoadImages

	//シーンID
	dim curSceneID
	curSceneID=ID_Splash
	//現在のFPS値5
	ddim curFPSval,1
	//フレームカウンタ
	dim FrameCount
	//セキュリティ情報の開示
	dim SecViewFlag
	//デバッグメニューのログのスクロール値
	dim DebugLogScr

	//////debug
	//読み込む譜面ファイル名
	gosub*InitScene

	gsel 0,1

*MainLoop

	SetDrawScreen DX_SCREEN_BACK
	ClearDrawScreen

	//シーン別描画
	switch curSceneID
		case ID_Splash		//スプラッシュ
			gosub*Scene_Splash
		swbreak
		case ID_Signin		//サインイン
			gosub*Scene_Signin
		swbreak
		case ID_ModeSelect	//モード選択
			gosub*Scene_ModeSelect
		swbreak
		case ID_MusicSelect	//曲選択
			gosub*Scene_MusicSelect
		swbreak
		case ID_Play		//プレイ
			gosub*Scene_Play
		swbreak
		case ID_Result		//リザルト
			gosub*Scene_Result
		swbreak
	swend

	//FPS表示
	if FrameCount\4==0 {
		GetFPS:getdouble:curFPSval=refdval 
	}

	//カウンタ処理
	SceneCount++
	FrameCount++

	//デバッグ用遅延処理
		if CheckHitKey(KEY_INPUT_TAB)==TRUE :WaitVSync 4
		if CheckHitKey(KEY_INPUT_F1)==TRUE {
			//デバッグメニュー
			DrawDebugString 0,16*0,"XODA ver"+BuildVersion_Major+"."+BuildVersion_Minor
			DrawDebugString 0,16*1,"HD "+DispWidth+"x"+DispHeight+" ["+ginfo(20)+"x"+ginfo(21)+"]"
			DrawDebugString 0,16*3,"FPS : "+strf("%.3f",curFPSval)+" ["+strf("%.2f",1000.0/curFPSval)+"ms]"
			DrawDebugString 0,16*4,"SCENE : ID["+curSceneID+"]"
			DrawDebugString 0,16*5,"F:"+FrameCount+" , F(S):"+SceneCount
			DrawDebugString 0,16*6,"USERNAME : "+authUserName+" , PASSWORD : "+RepHiddenWords(str(authPassword),"*")

			//ログ
			sdim tmpstr
			tmpstr=cnvatos(ConsoleLogBuf)
			notesel tmpstr
			repeat 25
				noteget NoteLine,notemax-cnt+DebugLogScr
				DrawDebugString 0,16*12+(25-cnt)*16,NoteLine
			loop
			noteunsel

			DrawDebugString 0,DispHeight-16,"F1:デバッグ情報の表示 , F2:セキュリティ情報の表示 , TAB:進行速度を1/4にする , PAGE UP:ログを上にスクロール , PAGE DOWN:ログを下にスクロール"
		}
		if CheckHitKey(KEY_INPUT_F2)==TRUE :SecViewFlag=TRUE:else:SecViewFlag=FALSE
		if FrameCount\2==0 {
			if CheckHitKey(KEY_INPUT_PGUP)==TRUE : DebugLogScr--
			if CheckHitKey(KEY_INPUT_PGDN)==TRUE : DebugLogScr++
		}

	ScreenFlip

	await

	goto*MainLoop

*StopError
	AddDebugConsole STYLE_ERROR,"処理を全て停止しました。"
	AddDebugConsole STYLE_STATUS,"終了待機中"
	dxlib_End
	BASS_Free
	dialog"エラーが発生したため、実行中の全ての処理を停止しました。",1,"XODA"
	stop

*ExitProg
	dxlib_End
	BASS_Free
	AddDebugConsole STYLE_NORMAL,"全ての処理を正常に終了しました。"
	AddDebugConsole STYLE_STATUS,"終了待機中"
	#ifndef _debug
	gosub*ExportLog
	#endif
	return

*Exit
	gosub*ExitProg
	end