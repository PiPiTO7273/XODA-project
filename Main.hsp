
//XODA-Project

#include"hsp3utf.as"
#include"DxLib.as"
#include"bass.as"
#include"a2dp.hsp"
#include"mod_dxlibplus.hsp"
#include"gm_crlf.hsp"
#include"llmod3/llmod3.hsp"
#include"llmod3/console.hsp"

#epack"enctable.bin"

#packopt hide 1

#ifdef _debug
	gsel 0,-1
	exist"Main.ax"
	if strsize!-1 {
		delete"Main.ax"
	}
	console
#endif

goto*Startup

#include"Symbol.hsp"
#include"Function_Default.hsp"
#include"Function_ExScript.hsp"
#include"Function_Play.hsp"
#include"Scene_Play.hsp"

*Startup

	sdim ConsoleLogBuf
	AddDebugConsole STYLE_NORMAL,"Startup..."

	//起動設定読み込み
	exist"Data/Index.dat"
	if strsize==-1 {
		AddDebugConsole STYLE_ERROR,"起動設定ファイルが見つかりません。"
		goto*StopError
	} else {
		sdim bootIndex,strsize
		bload"Data/Index.dat",bootIndex
		//シグネチャ
		dim SigErrFlag:SigErrFlag=FALSE
		if peek(bootIndex,0)!'x' :SigErrFlag=TRUE
		if peek(bootIndex,1)!'0' :SigErrFlag=TRUE
		if peek(bootIndex,3)!'A' :SigErrFlag=TRUE
		if SigErrFlag==TRUE {
			AddDebugConsole STYLE_ERROR,"起動設定ファイルの暗号化キーに無効な値が指定されています。"
			goto*StopError
		}

		//暗号化キー
		dim EncKey
		poke EncKey,0,peek(bootIndex,2)
		poke EncKey,1,peek(bootIndex,511)

		//辞書読み込み
		sdim encTable,(512-4-1)*256*256
		bload"Enctable.bin",encTable
		repeat 512-4-1
			poke bootIndex,4+cnt,peek(bootIndex,4+cnt)-peek(enctable,(512-4-1)*EncKey+cnt)
		loop

		//画面解像度
		dim DispWidth
		DispWidth=lpeek(bootIndex,4)
		dim DispHeight
		DispHeight=lpeek(bootIndex,8)
		//バージョン情報
		dim BuildVersion
		BuildVersion(0)=peek(bootIndex,16)		//Major
		BuildVersion(1)=peek(bootIndex,17)		//Minor
		BuildVersion(2)=peek(bootIndex,18)		//Patch

		//ログ出力
		AddDebugConsole STYLE_STATUS,"DISPLAY.WIDTH = "+DispWidth
		AddDebugConsole STYLE_STATUS,"DISPLAY.HEIGHT = "+DispHeight
		AddDebugConsole STYLE_STATUS,"BUILD.VERSION = "+BuildVersion(0)+"."+BuildVersion(1)+"."+BuildVersion(2)
		AddDebugConsole STYLE_STATUS,"SERVER.HOST = ****"
		AddDebugConsole STYLE_STATUS,"SERVER.USERNAME = ****"
		AddDebugConsole STYLE_STATUS,"SERVER.PASSWORD = ****"
	}

	//DXライブラリ初期化
	AddDebugConsole STYLE_NORMAL,"DXライブラリの初期化開始"
	SetOutApplicationLogValidFlag 0
	ChangeWindowMode TRUE
	SetGraphMode DispWidth,DispHeight,32
	SetAlwaysRunFlag TRUE
	SetMainWindowText"XODA v"+BuildVersion(0)+"."+BuildVersion(1)+"."+BuildVersion(2)
	SetWaitVSyncFlag TRUE
	dxlib_Init
	if stat==-1 {
		AddDebugConsole STYLE_ERROR,"DXライブラリの初期化に失敗しました。"
		goto*StopError
	} else {
		AddDebugConsole STYLE_NORMAL,"DXライブラリの初期化完了"
	}

	//BASS初期化
	BASS_Init -1,44100,0,hwnd,0
	if stat==0 {
		AddDebugConsole STYLE_ERROR,"BASS Audio Libraryの初期化に失敗しました。"
	} else {
		AddDebugConsole STYLE_NORMAL,"BASS Audio Libraryの初期化完了"
	}
	dim hbasssnd:dim hsmpsnd
	//開始音
	hsmpsnd(sndStart)=BASS_SampleLoad(FALSE,"Data/Sound/Start.wav",0,0,0,16,0)
	hbasssnd(sndStart)=BASS_SampleGetChannel(hsmpsnd(sndStart),FALSE)
	RegAudioLib TYPE_SE,"Data/Sound/Start.wav"
	//ヒット
	hsmpsnd(sndHitobj)=BASS_SampleLoad(FALSE,"Data/Sound/Hit.wav",0,0,0,16,0)
	hbasssnd(sndHitobj)=BASS_SampleGetChannel(hsmpsnd(sndHitobj),FALSE)
	RegAudioLib TYPE_SE,"Data/Sound/Hit.wav"
	//空打ち
	hsmpsnd(sndHitempty)=BASS_SampleLoad(FALSE,"Data/Sound/Empty.wav",0,0,0,16,0)
	hbasssnd(sndHitempty)=BASS_SampleGetChannel(hsmpsnd(sndHitempty),FALSE)
	RegAudioLib TYPE_SE,"Data/Sound/Empty.wav"
	//バースト
	hsmpsnd(sndBurst)=BASS_SampleLoad(FALSE,"Data/Sound/Burst.wav",0,0,0,16,0)
	hbasssnd(sndBurst)=BASS_SampleGetChannel(hsmpsnd(sndBurst),FALSE)
	BASS_ChannelSetAttribute hbasssnd(sndBurst),BASS_ATTRIB_VOL,tofloat(0.8)
	RegAudioLib TYPE_SE,"Data/Sound/Burst.wav"

	//フォントデータ初期化
	dim hdxfont
	hdxfont(fSysLayer)=CreateFontToHandle("SQNumber",20,-1,DX_FONTTYPE_NORMAL)
	hdxfont(fCurScore)=CreateFontToHandle("Pier Sans",32,-1,DX_FONTTYPE_ANTIALIASING_4X4)
	hdxfont(fGaugeVal)=CreateFontToHandle("SQNumber",20,-1,DX_FONTTYPE_NORMAL)
	hdxfont(fChartDetail)=CreateFontToHandle("Pier Sans",20,-1,DX_FONTTYPE_ANTIALIASING_4X4)
	hdxfont(fLyrics)=CreateFontToHandle("Noto Sans CJK JP Medium",24,-1,DX_FONTTYPE_ANTIALIASING_EDGE_4X4)
	hdxfont(fCombo)=CreateFontToHandle("SQNumber",45,-1,DX_FONTTYPE_ANTIALIASING)
	hdxfont(fPlayDetail)=CreateFontToHandle("M+ 2m",15,1,DX_FONTTYPE_ANTIALIASING)

	//画像読み込み
	dim hdximg,iMax
	SetUsePremulAlphaConvertLoad TRUE
	hdximg(iUI_bg_SongInfo)=LoadGraph("Data/Image/bg_SongInfo.png")
	hdximg(iUI_bg_Profile)=LoadGraph("Data/Image/bg_Profile.png")
	hdximg(iUI_bg_Score)=LoadGraph("Data/Image/bg_Score.png")
	hdximg(iUI_bg_Gauge)=LoadGraph("Data/Image/bg_Gauge.png")
	hdximg(iUI_tx_Combo)=LoadGraph("Data/Image/tx_Combo.png")
	hdximg(iChar_Player)=LoadGraph("Data/Image/Player.png")
	hdximg(iMovie_Start)=LoadGraph("Data/Movie/Start.ogv")
	hdximg(iHitCircle)=LoadGraph("Data/Object/Hit/Circle.png")

	hdximg(iParticle_Line_256_White)=LoadGraph("Data/Object/Particle/White_256.png")
	hdximg(iParticle_Fade_White)=LoadGraph("Data/Object/Particle/White_Fade.png")
	hdximg(iPlay_bg_Grid)=LoadGraph("Data/Object/Background/Grid.png")

	hdximg(iLaneEffect)=LoadGraph("Data/Image/LaneEffect.png")

	hdximg(iBurst_Combo_x50)=LoadGraph("Data/Object/Burst/Combo_50.png")
	hdximg(iBurst_Combo_x100)=LoadGraph("Data/Object/Burst/Combo_100.png")
	hdximg(iBurst_Combo_x200)=LoadGraph("Data/Object/Burst/Combo_200.png")
	hdximg(iBurst_Combo_x300)=LoadGraph("Data/Object/Burst/Combo_300.png")
	hdximg(iBurst_Combo_x400)=LoadGraph("Data/Object/Burst/Combo_400.png")
	hdximg(iBurst_Combo_x500)=LoadGraph("Data/Object/Burst/Combo_500.png")
	hdximg(iBurst_Combo_x600)=LoadGraph("Data/Object/Burst/Combo_600.png")
	hdximg(iBurst_Combo_x700)=LoadGraph("Data/Object/Burst/Combo_700.png")
	hdximg(iBurst_Combo_x800)=LoadGraph("Data/Object/Burst/Combo_800.png")
	hdximg(iBurst_Combo_x900)=LoadGraph("Data/Object/Burst/Combo_900.png")
	hdximg(iBurst_Combo_x1000)=LoadGraph("Data/Object/Burst/Combo_1000.png")

	dim hdxarr_Char_Slime,9*3
	dim hdxarr_Char_Slime_Hold,3*3*3
	LoadDivGraph"Data/Object/Hit/Char_Slime.png",9*3,9,3,48,48,varptr(hdxarr_Char_Slime)
	LoadDivGraph"Data/Object/Hit/Char_Slime_Hold.png",3*3*3,3,3*3,48,48,varptr(hdxarr_Char_Slime_Hold)

	dim hdxarr_Judge,10
	LoadDivGraph"Data/Image/Judge.png",10,1,10,150,32,varptr(hdxarr_Judge)

	dim hdxarr_HitBomb,10
	LoadDivGraph"Data/Object/Hit/Bomb.png",10,5,2,192,192,varptr(hdxarr_HitBomb)

	dim hdxarr_HoldCharge,80
	LoadDivGraph"Data/Object/Hit/Charge.png",80,9,9,128,128,varptr(hdxarr_HoldCharge)

	dim hdxarr_Gauge_Assist,100
	dim hdxarr_Gauge_Normal,100
	dim hdxarr_Gauge_Hard,100
	dim hdxarr_Gauge_Madness,100
	LoadDivGraph"Data/Image/Gauge_Assist.png",100,100,1,7,32,varptr(hdxarr_Gauge_Assist)
	LoadDivGraph"Data/Image/Gauge_Normal.png",100,100,1,7,32,varptr(hdxarr_Gauge_Normal)
	LoadDivGraph"Data/Image/Gauge_Hard.png",100,100,1,7,32,varptr(hdxarr_Gauge_Hard)
	LoadDivGraph"Data/Image/Gauge_Madness.png",100,100,1,7,32,varptr(hdxarr_Gauge_Madness)

	//シーンID
	dim curSceneID
	curSceneID=ID_Play

	//現在のFPS値
	ddim curFPSval,1

	//フレームカウンタ
	dim FrameCount

	//////debug
	//AquaPass初期設定
	sdim aqName
	aqName="Player01"
	ddim aqRate,1
	aqRate=12.34
	sdim aqBadge
	aqBadge="GOD"
	sdim aqIcon
	aqIcon=".default"
	gosub*Create_AQProfileBuf
	//読み込む譜面ファイル名
	sdim chartFileName
	chartFileName="0008"
	gosub*InitScene
	gosub*Scene_Init_Play
	gosub*LoadChart


*MainLoop

	//ウィンドウメッセージ処理
	ProcessMessage
	if stat==-1 :goto*Exit

	SetDrawScreen DX_SCREEN_BACK
	ClearDrawScreen

	//シーン別描画
	switch curSceneID
		case ID_Play
			gosub*Scene_Play
		swbreak
	swend

	//FPS表示
	if FrameCount\4==0 {
		GetFPS:getdouble:curFPSval=refdval
	}
	DrawStringToHandle 16,DispHeight-32,"FPS "+curFPSval,GetColor(255,255,255),hdxfont(fSysLayer)

	//カウンタ処理
	SceneCount++
	FrameCount++

	ScreenFlip

	goto*MainLoop

*StopError
	AddDebugConsole STYLE_ERROR,"処理を全て停止しました。"
	AddDebugConsole STYLE_STATUS,"終了待機中"
	dxlib_End
	BASS_Free
	dialog"エラーが発生したため、実行中の全ての処理を停止しました。",1,"XODA"
	stop

*Exit
	dxlib_End
	BASS_Free
	AddDebugConsole STYLE_NORMAL,"全ての処理を正常に終了しました。"
	AddDebugConsole STYLE_STATUS,"終了待機中"
	#ifndef _debug
	gosub*ExportLog
	#endif
	end