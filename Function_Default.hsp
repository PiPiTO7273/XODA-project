
#module
	#uselib "kernel32.dll"
	#func VirtualProtect "VirtualProtect" int, int, int, int
#deffunc getdouble
	if code == 0 {
		code=$0424448b,$04c218dd,$00000000
		VirtualProtect varptr(code),length(code)*4,$40,varptr(res)
		fret=0.0
	}
	prm=varptr(fret)
	res=callfunc(prm,varptr(code),1)
	return fret

	#defcfunc ConvUTF8toANSI str _p
		sdim tmpstr,512
		cnvstoa tmpstr,_p
		return tmpstr
#global

#deffunc AddDebugConsole int _style,str _msg
	sdim tmpstr
	if _style!STYLE_STATUS&_style!STYLE_COMMENT {
		tmpstr+strf("[%04d-%02d-%02d %02d:%02d:%02d.%03d], ",gettime(0),gettime(1),gettime(3),gettime(4),gettime(5),gettime(6),gettime(7))
	}
	dim tmpcolorcode
	switch _style
		case STYLE_NORMAL
			tmpcolorcode=1+2+4
			tmpstr+"[INFO],    - "
		swbreak
		case STYLE_WARNING
			tmpcolorcode=2+4
			tmpstr+"[WARNING], - "
		swbreak
		case STYLE_ERROR
			tmpcolorcode=4
			tmpstr+"[ERROR],   - "
		swbreak
		case STYLE_STATUS
			tmpcolorcode=8
			tmpstr+" - "
		swbreak
		case STYLE_COMMENT
			tmpcolorcode=1+2
		swbreak
	swend
	tmpstr+ConvUTF8toANSI(_msg)+"\n"

	//デバッグモード時のみコンソールの出力を行う
	#ifdef _debug
	console_color tmpcolorcode
	puts tmpstr
	#endif
	ConsoleLogBuf+tmpstr
	return

#defcfunc RepHiddenWords str _p,str _hiddenstr
	sdim tmpstr
	repeat strlen(_p)
		tmpstr+_hiddenstr
	loop
	return tmpstr

#deffunc RegAudioLib int _type,str _filename
	if _type==TYPE_BGM :AddDebugConsole TYPE_NORMAL,"[BGM] \""+_filename+"\" の読み込み完了"
	if _type==TYPE_SE :AddDebugConsole TYPE_NORMAL,"[SE] \""+_filename+"\" の読み込み完了"
	return

#defcfunc LoadGraph str _filename
	exist _filename
	if strsize==-1 {
		AddDebugConsole TYPE_ERROR,"[IMG] \""+_filename+"\" が見つかりません。"
		goto*StopError
	}
	AddDebugConsole TYPE_NORMAL,"[IMG] \""+_filename+"\" の読み込み完了"
	return LoadGraph_org(_filename)

#defcfunc ConvBooltoStr int _val
	if _val==TRUE :return"TRUE":else:return"FALSE"

//初期化処理
#deffunc ExScript_Init str _path,str _symbol

	AddDebugConsole STYLE_NORMAL,"[EXD] \""+_path+"\" 読み込みを開始"

	dim exdBGhwnd		//背景のハンドル
	dim exdImgHwnd		//イメージのハンドル格納
	dim exdImgMax		//イメージの最大数
	dim exdFuncHWND		//画像ハンドル
	dim exdFuncAlpha		//不透明度
	dim exdFuncWidth		//横幅
	dim exdFuncHeight		//高さ
	dim exdFuncMargin		//間隔
	dim exdFuncPosY		//位置(y)
	dim exdFuncSpeed		//速度
	dim exdFuncMax		//描画する回数
	dim exdVisColor,3	//ビジュアライザーの色

	//ファイル読み込み
	exist _path
	if strsize==-1 {
		AddDebugConsole STYLE_ERROR,"外部のスクリプトファイルが見つかりませんでした。"
		goto*StopError
	}
	dim exdBufSize
	exdBufSize=strsize
	sdim exdBuf,exdBufSize
	bload _path,exdBuf
	notesel exdBuf

	strrep exdBuf,"\t",""	//タブ除去

	sdim NoteLine
	sdim FuncName:sdim FuncPrm:sdim FuncDivPrm
	sdim CurSymbol
	repeat notemax
		noteget NoteLine,cnt

		//セクション開始
		if strmid(NoteLine,-1,1)=="{" {
			strrep NoteLine,"{",""
			strrep NoteLine," ",""
			CurSymbol=NoteLine
			continue
		}
		//セクション終了
		if NoteLine=="}" {
			CurSymbol=""
			continue
		}

		//コマンド行
		if getpath(CurSymbol,16)==getpath(_symbol,16) {
			split NoteLine," ",FuncName,FuncPrm
			split FuncPrm,",",FuncDivPrm

			switch FuncName
				//背景を登録
				case"RegBackground"
					exdBGhwnd=LoadGraph("Data/Object/Background/"+FuncPrm)
				swbreak
				//画像ファイルを新規登録
				case"RegImage"
					if exdImgMax!int(FuncDivPrm(0)) {
						AddDebugConsole STYLE_WARNING,"[EXD] 画像ファイルの登録順が変更されました。"
						AddDebugConsole STYLE_STATUS,"ID["+int(FuncDivPrm(0))+"] > ID["+exdImgMax+"]"
					}
					exdImgHwnd(exdImgMax)=LoadGraph("Data/Object/Background/"+FuncDivPrm(1))
					if exdImgHwnd(exdImgMax)==0 {
						AddDebugConsole STYLE_WARNING,"[EXD] 読み込みエラー \"Data/Object/Background/"+FuncDivPrm(1)+"\""
					}
					exdImgMax++
				swbreak
				//オブジェクトを描画
				case"DrawObject"
					exdFuncHWND(exdFuncMax)=exdImgHwnd(int(FuncDivPrm(0)))
					exdFuncAlpha(exdFuncMax)=int(FuncDivPrm(1))
					exdFuncWidth(exdFuncMax)=int(FuncDivPrm(2))
					exdFuncHeight(exdFuncMax)=int(FuncDivPrm(3))
					exdFuncMargin(exdFuncMax)=int(FuncDivPrm(4))
					exdFuncPosY(exdFuncMax)=int(FuncDivPrm(5))
					exdFuncSpeed(exdFuncMax)=int(FuncDivPrm(6))
					exdFuncMax++
				swbreak
				//ビジュアライザーの色を指定
				case"SetVisualizerColor"
					if getpath(FuncPrm,16)=="all" {
						//虹色
						exdVisColor=-1,-1,-1
					} else {
						//単色
						exdVisColor=int(FuncDivPrm(0)),int(FuncDivPrm(1)),int(FuncDivPrm(2))
					}
				swbreak

				//例外
				default
					AddDebugConsole STYLE_WARNING,"[EXD] 無効なパラメータが指定されました。 \""+FuncName+"\""
				swbreak
			swend
		}
	loop

	AddDebugConsole STYLE_NORMAL,"[EXD] \""+_path+"\" 読み込みを完了"

	return

//終了処理
//（！）メモリリークが起きる可能性があるので、処理が完了した後に必ず呼び出すこと
#deffunc ExScript_Free

	AddDebugConsole STYLE_NORMAL,"[EXD] バッファの解放完了"
	DeleteGraph exdBGhwnd
	repeat exdImgMax
		DeleteGraph exdImgHwnd(cnt)
	loop

	return

*ExportLog
	notesel ConsoleLogBuf
	notesave"Log.txt"
	return

*InitScene

	//シーン別カウンタ
	dim SceneCount

	//イージング関数用
	dim EasePosX
	dim EasePosY
	dim EaseWidth
	dim EaseHeight
	dim EaseAlpha

	randomize

	AddDebugConsole STYLE_NORMAL,"シーンの初期化完了"

	return

*Create_AQProfileBuf

	alCreateImage i2D_Profile,300,120
		alColor 230,230,230,255
		alFont"Pier Sans",20	//名前
		alDrawText aqName,120,14,300-120,120-14,0,0
		alFont"Pier Sans",16	//レート
		alDrawText "RATE:"+aqRate,120,47,300-120,120-47,0,0
		alFont"Noto Sans CJK JP Regular",14	//称号
		alDrawText aqBadge,120,70,300-120,120-70,0,0

	if hdximg(iUI_tx_Profile)!0 :DeleteGraph hdximg(iUI_tx_Profile)
	hdximg(iUI_tx_Profile)=MakeScreen(300,120,TRUE)
	alCopyImageToDXBuf i2D_Profile,hdximg(iUI_tx_Profile)

	AddDebugConsole STYLE_NORMAL,"アカウント情報が更新されました。"
	AddDebugConsole STYLE_STATUS,"NAME = "+aqName
	AddDebugConsole STYLE_STATUS,"RATE = "+aqRate
	AddDebugConsole STYLE_STATUS,"BADGE = "+aqBadge
	return