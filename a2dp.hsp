// 
// [ Infomation ]
//  Name      : Artlet2D Plus
//  Version   : 1.01
//  copyright : GENKI
// 
// [ Update history ]
// yyyy/mm/dd : ver  : comment
// 2014/01/11 : 1.00 : 完成
// 
// [ Comment ]
// Artlet2Dへの機能追加を行います。
//
// 次の機能が追加されます。
// ・キャップスタイルの変更
// ・角丸図形の描画
// ・連続線の結合方法の変更
//


;============================================================
;	Artlet2D
;		version 1.01 R3 update 2018/06/01
;			s.programs http://spn.php.xdomain.jp/
;============================================================

#ifndef alInitModule

;============================================================
#module a2d

#define IMGS_MAX 512 ; Number of Image IDs

;-----------------------------------------------------------
; declare func / const

; GDI+ Token
#uselib "Data/Plugins/core_2D.bin"
#func GdiplusStartup	"GdiplusStartup"	int, int, int
#func GdiplusShutdown	"GdiplusShutdown"	int

; Image Object
#uselib "Data/Plugins/core_2D.bin"
#func GdipCreateBitmapFromScan0	"GdipCreateBitmapFromScan0"	int, int, int, int, int, int
#func GdipCreateBitmapFromGdiDib "GdipCreateBitmapFromGdiDib"	int, int, int
#func GdipLoadImageFromFile	"GdipLoadImageFromFile"	wstr, int
#func GdipDisposeImage		"GdipDisposeImage"	int
#func GdipBitmapLockBits	"GdipBitmapLockBits"	int, int, int, int, int
#func GdipBitmapUnlockBits	"GdipBitmapUnlockBits"	int, int
#func GdipGetImageWidth		"GdipGetImageWidth"	int, int
#func GdipGetImageHeight	"GdipGetImageHeight"	int, int
#func GdipBitmapGetPixel	"GdipBitmapGetPixel"	int, int, int, int
#func GdipBitmapSetPixel	"GdipBitmapSetPixel"	int, int, int, int
#func GdipSaveImageToFile	"GdipSaveImageToFile"	int, wstr, int, int

; Graphics Object
#uselib "Data/Plugins/core_2D.bin"
#func GdipGetImageGraphicsContext "GdipGetImageGraphicsContext" int, int
#func GdipCreateFromHDC		"GdipCreateFromHDC"	int, int
#func GdipDeleteGraphics	"GdipDeleteGraphics"	int
#func GdipSetSmoothingMode	"GdipSetSmoothingMode"	int, int
#func GdipSetPixelOffsetMode	"GdipSetPixelOffsetMode"	int, int
#func GdipSetCompositingQuality	"GdipSetCompositingQuality"	int, int
#func GdipSetTextRenderingHint	"GdipSetTextRenderingHint"	int, int
#func GdipSetCompositingMode	"GdipSetCompositingMode"	int, int
#func GdipSetWorldTransform	"GdipSetWorldTransform"	int, int
#func GdipResetWorldTransform	"GdipResetWorldTransform" int
#func GdipSetClipRectI		"GdipSetClipRectI"	int, int, int, int, int, int
#func GdipResetClip		"GdipResetClip"		int

; Brush Object
#uselib "Data/Plugins/core_2D.bin"
#func GdipCreateSolidFill	"GdipCreateSolidFill"	int, int
#func GdipCreateLineBrushI	"GdipCreateLineBrushI"	int, int, int, int, int, int
#func GdipCreateTexture		"GdipCreateTexture"	int, int, int
#func GdipDeleteBrush		"GdipDeleteBrush"	int

; Pen Object
#uselib "Data/Plugins/core_2D.bin"
#func GdipCreatePen1		"GdipCreatePen1"	int, float, int, int
#func GdipCreatePen2		"GdipCreatePen2"	int, float, int, int
#func GdipDeletePen		"GdipDeletePen"		int
#func GdipGetPenWidth		"GdipGetPenWidth"	int, int
#func GdipSetPenWidth		"GdipSetPenWidth"	int, int
#func GdipGetPenDashStyle	"GdipGetPenDashStyle"	int, int
#func GdipSetPenDashStyle	"GdipSetPenDashStyle"	int, int
#func GdipSetPenMode		"GdipSetPenMode"	int, int

; Font Object
#uselib "Data/Plugins/core_2D.bin"
#func GdipCreateFontFromDC	"GdipCreateFontFromDC"	int, int
#func GdipDeleteFont		"GdipDeleteFont"	int

; DrawImage
#uselib "Data/Plugins/core_2D.bin"
#func GdipDrawImageI		"GdipDrawImageI"		int, int, int, int
#func GdipDrawImagePointRectI	"GdipDrawImagePointRectI"	int, int, int, int, int, int, int, int, int
#func GdipDrawImageRectRectI	"GdipDrawImageRectRectI"	int, int, int, int, int, int, int, int, int, int, int, int, int, int
#func GdipDrawImagePointsI	"GdipDrawImagePointsI"		int, int, int, int

; PixelFormat
#const	PixelFormatGDI          0x00020000 // Is a GDI-supported format
#const	PixelFormatAlpha        0x00040000 // Has an alpha component
#const	PixelFormatCanonical    0x00200000
#const	PixelFormat24bppRGB        (8 | (24 << 8) | PixelFormatGDI)
#const	PixelFormat32bppARGB       (10 | (32 << 8) | PixelFormatAlpha | PixelFormatGDI | PixelFormatCanonical)

;enum DashStyle
#enum global	DashStyleSolid	= 0
#enum global	DashStyleDash
#enum global	DashStyleDot
#enum global	DashStyleDashDot
#enum global	DashStyleDashDotDot
#enum global	DashStyleCustom

;enum WrapMode
#enum global	WrapModeTile	= 0
#enum global	WrapModeTileFlipX
#enum global	WrapModeTileFlipY
#enum global	WrapModeTileFlipXY
#enum global	WrapModeClamp

;enum Unit
#enum	UnitWorld = 0	// 0 -- World coordinate (non-physical unit)
#enum	UnitDisplay	// 1 -- Variable -- for PageTransform only
#enum	UnitPixel	// 2 -- Each unit is one device pixel.

;-----------------------------------------------------------
; tools

; misc
#uselib "kernel32"
#cfunc alWstrlen "lstrlenW" wptr

; tool
#defcfunc alFloat double p1
	temp = p1
	return ((p1 < 0) << 31) | (lpeek(temp,4) - 0x38000000 << 3) * (p1 ! 0) | (lpeek(temp,0) >> 29 & 7)

; ginfo
#define gf_sel ginfo(3)
#define gf_r ginfo(16)
#define gf_g ginfo(17)
#define gf_b ginfo(18)
#define gf_intid ginfo(24)

; ARGB Macro
#define global ctype RGBA(%1=0, %2=0, %3=0, %4=255) (((%4)<<24)|((%1)<<16)|((%2)<<8)|(%3))
#define global ctype ARGB(%1=255, %2=0, %3=0, %4=0) (((%1)<<24)|((%2)<<16)|((%3)<<8)|(%4))
#define global ctype ARGB_A(%1) (((%1)>>24)&255)
#define global ctype ARGB_R(%1) (((%1)>>16)&255)
#define global ctype ARGB_G(%1) (((%1)>>8)&255)
#define global ctype ARGB_B(%1) ((%1)&255)

; 命令名
; ・命令名に Image を含むものは引数に Image ID を受け取る / そうでない命令は含んではいけない
; ・命令名に Screen を含むものは引数に HSP Screen ID を受け取る / そうでない命令は含んではいけない
; ・命令名に File を含むものは引数にファイル名を受け取る / そうでない命令は含んではいけない

;============================================================
;	イメージ管理
;============================================================

;-----------------------------------------------------------
#deffunc alInitModule
	; Initialize
	if gdiplusToken = 0 {
		; Image セットバッファ 作成
		; 1 つの Image セットは、
		; Valid, Width, Height, objImage, objGraphics, objBrush, objPen, objFont
		; のセットである

		; img プロパティ
		dim imgValidArr, IMGS_MAX	; 有効フラグ
		dim imgWidthArr, IMGS_MAX	; Image Width
		dim imgHeightArr, IMGS_MAX	; Image Height

		; img object
		dim imgImageArr, IMGS_MAX
		dim imgGraphicsArr, IMGS_MAX
		dim imgBrushArr, IMGS_MAX
		dim imgPenArr, IMGS_MAX
		dim imgFontArr, IMGS_MAX

		if varptr(GdiplusStartup) {
			gsi = 1, 0, 0, 0
			GdiplusStartup varptr(gdiplusToken), varptr(gsi), 0	; GDI+ 開始
			return
		}
	}
	return

;-----------------------------------------------------------
#deffunc alSelectImage int p1

	if (p1 < 0) | (p1 >= IMGS_MAX) : return -1
	alInitModule

	if imgValidArr(p1) { ; 有効な Image ID ならコンテキスト切り替え
		imgID = p1

		; Image プロパティ
		dup imgValid,	imgValidArr(imgID)
		dup imgWidth,	imgWidthArr(imgID)
		dup imgHeight,	imgHeightArr(imgID)

		; Image object
		dup imgImage,	imgImageArr(imgID)
		dup imgGraphics,imgGraphicsArr(imgID)
		dup imgBrush,	imgBrushArr(imgID)
		dup imgPen,	imgPenArr(imgID)
		dup imgFont,	imgFontArr(imgID)

		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alDeleteImage int p1, int p2

	if (p1 < 0) | (p1 >= IMGS_MAX) : return -1
	alInitModule

	if imgValidArr(p1) {
		; Image ID の開放
		imgValidArr(p1) = 0

		; リソースの開放
		if imgImageArr(p1) {
			GdipDisposeImage imgImageArr(p1)	; Image を処分
			imgImageArr(p1) = 0
		}
		if imgGraphicsArr(p1) {
			GdipDeleteGraphics imgGraphicsArr(p1)	; Graphics を削除
			imgGraphicsArr(p1) = 0
		}
		if imgBrushArr(p1) {
			GdipDeleteBrush imgBrushArr(p1)		; Brush を削除
			imgBrushArr(p1) = 0
		}
		if imgPenArr(p1) {
			GdipDeletePen imgPenArr(p1)		; Pen を削除
			imgPenArr(p1) = 0
		}
		if imgFontArr(p1) {
			GdipDeleteFont imgFontArr(p1)		; Font を削除
			imgFontArr(p1) = 0
		}

		if p2 ! 1 { ; p2 = 1 の場合、GDI+ を終了しない
			; すべての Image が開放されたら: GDI+ 終了
			repeat IMGS_MAX + 1
				if cnt = IMGS_MAX {
					GdiplusShutdown gdiplusToken ; GDI+ 終了
					gdiplusToken = 0
					break
				}
				if imgValidArr(cnt) {
					break
				}
			loop
		}

		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alCreateImage_ int p1, int pw, int ph

	if (p1 < 0) | (p1 >= IMGS_MAX) : return -1
	alInitModule

	if gdiplusToken {
		; 有効化
		alDeleteImage p1, 1	; Image ID 削除
		imgValidArr(p1) = 1	; Image ID を有効化
		alSelectImage p1	; 選択 (dup-context change)

		; プロパティ 設定
		imgWidth  = pw
		imgHeight = ph

		; オフスクリーンバッファ Image / Graphics 作成
		GdipCreateBitmapFromScan0 imgWidth, imgHeight, 0, PixelFormat32bppARGB, 0, varptr(imgImage)
		GdipGetImageGraphicsContext imgImage, varptr(imgGraphics)

		; デフォルト Brush / Pen 作成
		GdipCreateSolidFill 0xff000000, varptr(imgBrush)
		GdipCreatePen2 imgBrush, 1, UnitPixel, varptr(imgPen) ; (default PenWidth = 1px)

		; Graphics 高画質モードに設定
		GdipSetSmoothingMode imgGraphics, 2	; SmoothingModeHighQuality = QualityModeHigh
		GdipSetPixelOffsetMode imgGraphics, 2	; PixelOffsetModeHighQuality = QualityModeHigh
		GdipSetTextRenderingHint imgGraphics, 4	; TextRenderingHintAntiAlias
		;GdipSetCompositingQuality imgGraphics, 2 ; CompositingQualityHighQuality = QualityModeHigh

		return 0
	}
	return -1

#define global alCreateImage(%1=0, %2=640, %3=480)	alCreateImage_ %1, %2, %3

;-----------------------------------------------------------
#deffunc alDeleteAll  onexit
	if gdiplusToken {
		repeat IMGS_MAX
			alDeleteImage cnt
		loop
		return 0
	}
	return -1

;-----------------------------------------------------------
#defcfunc alGetID
	if imgValid : return imgID
	return -1

#defcfunc alGetWidth
	if imgValid : return imgWidth
	return -1

#defcfunc alGetHeight
	if imgValid : return imgHeight
	return -1

;============================================================
;	クリッピング
;============================================================

;-----------------------------------------------------------
#deffunc alClipModeRect int px, int py, int pw, int ph
	if imgValid : GdipSetClipRectI imgGraphics, px, py, pw, ph, 0
	return

;-----------------------------------------------------------
#deffunc alResetClipMode
	if imgValid : GdipResetClip imgGraphics
	return

;============================================================
;	コピーモード
;============================================================

; ImageAttributes Object
#uselib "Data/Plugins/core_2D.bin"
#func GdipCreateImageAttributes		"GdipCreateImageAttributes"	int
#func GdipDisposeImageAttributes	"GdipDisposeImageAttributes"	int
#func GdipSetImageAttributesColorMatrix	"GdipSetImageAttributesColorMatrix"	int, int, int, int, int, int
#func GdipSetImageAttributesColorKeys	"GdipSetImageAttributesColorKeys"	int, int, int, int, int
#func GdipSetImageAttributesGamma	"GdipSetImageAttributesGamma"		int, int, int, float

;-----------------------------------------------------------
#deffunc alResetCopyMode
	if pImageAttr {
		GdipDisposeImageAttributes pImageAttr
		pImageAttr = 0
		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alCopyModeColorMatrix array v
	if gdiplusToken {
		alResetCopyMode
		GdipCreateImageAttributes varptr(pImageAttr)

		; Color Matrix (float)
		; 行列転置 + ダミー列追加
		repeat 25
			if cnt = 24 {
				arr(cnt) = alFloat(1)
			} else:if cnt \ 5 = 4 {
				arr(cnt) = 0
			} else {
				arr(cnt) = alFloat(v(cnt\5*5+cnt/5))
			}
		loop

		; ColorMatrixFlagsDefault = 0
		; ColorAdjustTypeBitmap = 1
		GdipSetImageAttributesColorMatrix pImageAttr, 1, 1, varptr(arr), 0, 0
	}
	return 0

#define global MAT_R 0
#define global MAT_G 5
#define global MAT_B 10
#define global MAT_A 15

;-----------------------------------------------------------
#deffunc alCopyModeAlpha double p1
	cmatrix(MAT_R) = 1.0, 0.0, 0.0
	cmatrix(MAT_G) = 0.0, 1.0, 0.0
	cmatrix(MAT_B) = 0.0, 0.0, 1.0
	cmatrix(MAT_A) = 0.0, 0.0, 0.0, limitf(p1, 0, 1), 0.0
	alCopyModeColorMatrix cmatrix
	return 0

;-----------------------------------------------------------
#deffunc alCopyModeGamma double p1
	if gdiplusToken {
		alResetCopyMode
		GdipCreateImageAttributes varptr(pImageAttr)
		GdipSetImageAttributesGamma pImageAttr, 1, 1, p1
	}
	return 0

;-----------------------------------------------------------
#deffunc alCopyModeColorKey int p1, int p2
	if gdiplusToken {
		alResetCopyMode
		GdipCreateImageAttributes varptr(pImageAttr)
		GdipSetImageAttributesColorKeys pImageAttr, 0, 1, p1, p2 ; (ColorAdjustTypeDefault = 0)
	}
	return 0

;============================================================
;	コピー・ズーム
;============================================================

;-----------------------------------------------------------
#deffunc alStretchImageToImage int p2, int p1,  int psx, int psy, int psw, int psh,  int pdx, int pdy, int pdw, int pdh
	if imgValidArr(p1) & imgValidArr(p2) {
		GdipDrawImageRectRectI imgGraphicsArr(p1), imgImageArr(p2), pdx, pdy, pdw, pdh, psx, psy, psw, psh, UnitPixel, pImageAttr, 0, 0
		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alStretchImageToScreen int p2, int p1,  int psx, int psy, int psw, int psh,  int pdx, int pdy, int pdw, int pdh
	if imgValidArr(p2) {
		; HSP オフスクリーンバッファの Graphics 作成
		gsel p1
		GdipCreateFromHDC hdc, varptr(tmpGraphics)

		if tmpGraphics {
			GdipDrawImageRectRectI tmpGraphics, imgImageArr(p2), pdx, pdy, pdw, pdh, psx, psy, psw, psh, UnitPixel, pImageAttr, 0, 0
			GdipDeleteGraphics tmpGraphics	; tmpGraphics を削除
			tmpGraphics = 0
			return 0
		}
	}
	return -1

;-----------------------------------------------------------
#deffunc alStretchScreenToImage int p2, int p1,  int psx, int psy, int psw, int psh,  int pdx, int pdy, int pdw, int pdh
	if imgValidArr(p1) {
		; HSP オフスクリーンバッファの Image 作成
		gsel p2
		mref v, 67
		GdipCreateBitmapFromGdiDib v.6, v.5, varptr(tmpImage)

		if tmpImage {
			GdipDrawImageRectRectI imgGraphicsArr(p1), tmpImage, pdx, pdy, pdw, pdh, psx, psy, psw, psh, UnitPixel, pImageAttr, 0, 0
			GdipDisposeImage tmpImage	; Image を処分
			tmpImage = 0
			return 0
		}
	}
	return -1

;-----------------------------------------------------------
; Copy (prm : srcID, destID, destX, destY, width, height, srcX, srcY)
#define global alCopyImageToImage(%1=0, %2=0, %3=0, %4=0, %5=9999, %6=9999, %7=0, %8=0)		alStretchImageToImage %1, %2, %7, %8, %5, %6, %3, %4, %5, %6
#define global alCopyImageToScreen(%1=0, %2=0, %3=0, %4=0, %5=9999, %6=9999, %7=0, %8=0)	alStretchImageToScreen %1, %2, %7, %8, %5, %6, %3, %4, %5, %6
#define global alCopyScreenToImage(%1=0, %2=0, %3=0, %4=0, %5=9999, %6=9999, %7=0, %8=0)	alStretchScreenToImage %1, %2, %7, %8, %5, %6, %3, %4, %5, %6

/*
;-----------------------------------------------------------
#deffunc al3PointsImageToImage int p2, int p1, array va
	if imgValidArr(p1) & imgValidArr(p2) {
		GdipDrawImagePointsI imgGraphicsArr(p1), imgImageArr(p2), varptr(va), 3
		return 0
	}
	return -1
*/

;============================================================
;	ピクセル操作
;============================================================

;-----------------------------------------------------------
#defcfunc alGetPixel int px, int py
	if imgValid {
		a = 0
		GdipBitmapGetPixel imgImage, px, py, varptr(a)
		return a
	}
	return 0

;-----------------------------------------------------------
#deffunc alSetPixel int px, int py, int p1
	if imgValid : GdipBitmapSetPixel imgImage, px, py, p1
	return 0

;-----------------------------------------------------------
#deffunc alGetBitmapVData var ps, var pv ; size, vvar
	if imgValid {
		; LockBits して bitmap image へのポインタを得る
		rect = 0, 0, imgWidth, imgHeight
		dim BitmapData, 8
		GdipBitmapLockBits imgImage, varptr(rect), 3, PixelFormat32bppARGB, varptr(BitmapData)
		GdipBitmapUnlockBits imgImage, varptr(BitmapData)

		ps = BitmapData(0) * BitmapData(1) * 4  ; Width * Height * ByPP
		dupptr pv, BitmapData(4), ps
		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alErase
	if imgValid {
		alGetBitmapVData size, v

		; ゼロクリア
		memset v, 0, size
		return 0
	}
	return -1

;============================================================
;	ファイル操作
;============================================================

; ImageEncoder
#uselib "Data/Plugins/core_2D.bin"
#func GdipGetImageEncodersSize	"GdipGetImageEncodersSize"	int, int
#func GdipGetImageEncoders	"GdipGetImageEncoders"	int, int, int

;-----------------------------------------------------------
#deffunc alLoadFile str p1, int pdx, int pdy  ; filename, point
	if imgValid {
		GdipLoadImageFromFile p1, varptr(tmpImage) ; ファイルから Image をコンストラクト
		if tmpImage {
			GdipGetImageWidth  tmpImage, varptr(w)
			GdipGetImageHeight tmpImage, varptr(h)
			GdipDrawImageRectRectI imgGraphics, tmpImage, pdx, pdy, w, h, 0, 0, w, h, UnitPixel, 0, 0, 0
			GdipDisposeImage tmpImage	; Image を処分
			tmpImage = 0
			return 0
		}
	}
	return -1

;-----------------------------------------------------------
#deffunc alSaveFile_ str p1, str p2, int px, int py, int pw, int ph  ; filename, mime, rect
	if imgValid {
		dim CLSID, 4

		; GetEncoderClsid() HSP Version
		GdipGetImageEncodersSize varptr(numEncoders), varptr(size)
		if size {
			dim ImageCodecInfo, size / 4 ; ImageCodecInfo 構造体の配列を取得する var

			GdipGetImageEncoders numEncoders, size, varptr(ImageCodecInfo)

			; sizeof(ImageCodecInfo)         == 19int
			; ImageCodecInfo.CLSID offset    == 0int
			; ImageCodecInfo.MimeType offset == 12int
			repeat numEncoders ; 全エンコーダから目的のものを探す
				dupptr v, ImageCodecInfo(cnt * 19 + 12), 128 ; MimeType 名が入った wchar[]
				if cnvwtos(v) = p2 { ; 目的の MimeType (p2) があったらば
					memcpy CLSID, ImageCodecInfo(cnt * 19), 16 ; それをコピーして
					break ; 探索終了
				}
			loop
		}

		if CLSID {
			; rect で切り取られた領域を temp Image に作成して Save
			GdipCreateBitmapFromScan0 pw, ph, 0, PixelFormat32bppARGB, 0, varptr(tmpImage)	; temp Image 作成
			GdipGetImageGraphicsContext tmpImage, varptr(tmpGraphics)			; temp Graphics 作成

			GdipDrawImageI tmpGraphics, imgImage, -px, -py		; メイン Image から転送
			GdipSaveImageToFile tmpImage, p1, varptr(CLSID), 0	; Save tmpImage

			GdipDeleteGraphics tmpGraphics	; tmp Graphics を削除
			tmpGraphics = 0
			GdipDisposeImage tmpImage	; tmp Image を処分
			tmpImage = 0
			return 0
		}
	}
	return -1

#define global alSaveFile(%1, %2="image/png", %3=0, %4=0, %5=imgWidth@a2d, %6=imgHeight@a2d)	alSaveFile_ %1, %2, %3, %4, %5, %6
; MIME : image/bmp image/jpeg image/gif image/tiff image/png

;-----------------------------------------------------------
#deffunc alGetFileWidth str p1, var vx, var vy  ; filename, width, height
	alInitModule
	if gdiplusToken {
		GdipLoadImageFromFile p1, varptr(tmpImage) ; ファイルから Image をコンストラクト
		if tmpImage {
			GdipGetImageWidth  tmpImage, varptr(vx)
			GdipGetImageHeight tmpImage, varptr(vy)

			GdipDisposeImage tmpImage	; Image を処分
			tmpImage = 0
			return 0
		}
	}
	return -1

;-----------------------------------------------------------
#deffunc alCreateImageByFile int p1, str p2 ; ID, filename
	alGetFileWidth p2, w, h
	if stat = 0 {
		alCreateImage p1, w, h	; 強制的に 32bpp にするために 2 pass でロード
		alLoadFile p2
		return 0
	}
	return -1

;============================================================
;	ブラシ設定
;============================================================
; (Pen と Brush はモジュール外からは区別しない)

;-----------------------------------------------------------
#deffunc alPenWidth int p1
	if imgValid : GdipSetPenWidth imgPen, alFloat(p1)
	return

;-----------------------------------------------------------
#deffunc alPenStyle int p1
	if imgValid : GdipSetPenDashStyle imgPen, p1
	return

;-----------------------------------------------------------
#deffunc alRenewPen
	if imgValid {
		GdipGetPenDashStyle imgPen, varptr(a)	; 旧ペンのスタイルを保存
		GdipGetPenWidth imgPen, varptr(b)	; 旧ペンの Width を保存

		GdipDeletePen imgPen		; 旧ペンを削除
		;imgPen = 0
		GdipCreatePen2 imgBrush, 1, UnitPixel, varptr(imgPen)	; ペンを作成

		GdipSetPenDashStyle imgPen, a	; 旧ペンのスタイルを復元
		GdipSetPenWidth imgPen, b	; 旧ペンの Width を復元

		GdipSetCompositingMode imgGraphics, 0 ; (default:SourceOver = 0, SourceCopy = 1)
	}
	return

;-----------------------------------------------------------
#deffunc alColorAlpha_ int p1
	if imgValid {
		GdipDeleteBrush imgBrush	; 旧ブラシを削除
		;imgBrush = 0
		GdipCreateSolidFill RGBA(gf_r, gf_g, gf_b, p1), varptr(imgBrush)	; ブラシを作成
		alRenewPen
	}
	return

; color 系命令
#define global alColor(%1=0, %2=0, %3=0, %4=255)	color %1, %2, %3 : alColorAlpha_ %4
#define global alHsvColor(%1=0, %2=0, %3=0, %4=255)	hsvcolor %1, %2, %3 : alColorAlpha_ %4
#define global alSysColor(%1=0, %2=255)			syscolor %1 : alColorAlpha_ %2

;-----------------------------------------------------------
#deffunc alGradientColor_ int px1, int py1, int px2, int py2, int pc1, int pc2, int p1
	if imgValid {
		GdipDeleteBrush imgBrush	; 旧ブラシを削除
		;imgBrush = 0
		point1 = px1, py1
		point2 = px2, py2
		GdipCreateLineBrushI varptr(point1), varptr(point2), pc1, pc2, p1, varptr(imgBrush)
		alRenewPen
	}
	return

#define global alGradientColor(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d, %5=0xff000000, %6=0xff000000, %7=WrapModeTile)	alGradientColor_ %1, %2, %3, %4, %5, %6, %7

;-----------------------------------------------------------
#deffunc alTextureImage_ int p1, int p2
	if imgValid & imgValidArr(p1) {
		GdipDeleteBrush imgBrush	; 旧ブラシを削除
		;imgBrush = 0
		GdipCreateTexture imgImageArr(p1), p2, varptr(imgBrush)
		alRenewPen
		return 0
	}
	return -1

#define global alTextureImage(%1=0, %2=WrapModeTile)	alTextureImage_ %1, %2

;-----------------------------------------------------------
#deffunc alEraserBrush
	if imgValid {
		GdipDeleteBrush imgBrush	; 旧ブラシを削除
		;imgBrush = 0
		GdipCreateSolidFill 0, varptr(imgBrush)	; ブラシを作成
		alRenewPen
		GdipSetCompositingMode imgGraphics, 1 ; (SourceOver = 0, SourceCopy = 1)
	}
	return

;-----------------------------------------------------------
#deffunc alFont_ str p1, int p2, int p3
	if imgValid {
		font p1, p2, p3
		if imgFont {
			GdipDeleteFont imgFont	; 旧フォントを削除
			;imgFont = 0
		}
		GdipCreateFontFromDC hdc, varptr(imgFont)	; HSP オフスクリーン dc からフォントをコンストラクト
	}
	return

#define global alFont(%1="Arial", %2=16, %3=0)	alFont_ %1, %2, %3

;============================================================
;	図形描画
;============================================================

; String Format Object
#uselib "Data/Plugins/core_2D.bin"
#func GdipCreateStringFormat	"GdipCreateStringFormat"	int, int, int
#func GdipDeleteStringFormat	"GdipDeleteStringFormat"	int
#func GdipSetStringFormatAlign	"GdipSetStringFormatAlign"	int, int
#func GdipSetStringFormatLineAlign "GdipSetStringFormatLineAlign"	int, int

; Graphics Object -> Draw / Fill
#uselib "Data/Plugins/core_2D.bin"
#func GdipDrawLineI		"GdipDrawLineI"		int, int, int, int, int, int
#func GdipDrawEllipseI		"GdipDrawEllipseI"	int, int, int, int, int, int
#func GdipFillEllipseI		"GdipFillEllipseI"	int, int, int, int, int, int
#func GdipDrawRectangleI	"GdipDrawRectangleI"	int, int, int, int, int, int
#func GdipFillRectangleI	"GdipFillRectangleI"	int, int, int, int, int, int
#func GdipDrawLinesI		"GdipDrawLinesI"	int, int, int, int
#func GdipDrawPolygonI		"GdipDrawPolygonI"	int, int, int, int
#func GdipFillPolygonI		"GdipFillPolygonI"	int, int, int, int, int
#func GdipDrawCurve2I		"GdipDrawCurve2I"	int, int, int, int, float
#func GdipDrawClosedCurve2I	"GdipDrawClosedCurve2I"	int, int, int, int, float
#func GdipFillClosedCurve2I	"GdipFillClosedCurve2I"	int, int, int, int, float, int
#func GdipDrawArcI		"GdipDrawArcI"		int, int, int, int, int, int, float, float
#func GdipDrawPieI		"GdipDrawPieI"		int, int, int, int, int, int, float, float
#func GdipFillPieI		"GdipFillPieI"		int, int, int, int, int, int, float, float
#func GdipDrawString		"GdipDrawString"	int, wstr, int, int, int, int, int

;-----------------------------------------------------------
#deffunc alDrawText_ str p1, int px, int py, int pw, int ph, int pah, int pav
	if imgFont {
		GdipCreateStringFormat 0, 0, varptr(tmpFormat) ; アラインメント用 Format オブジェクト
		GdipSetStringFormatAlign tmpFormat, pah
		GdipSetStringFormatLineAlign tmpFormat, pav

		rectf = alFloat(px), alFloat(py), alFloat(pw), alFloat(ph)
		GdipDrawString imgGraphics, p1, alWstrlen(p1), imgFont, varptr(rectf), tmpFormat, imgBrush

		GdipDeleteStringFormat tmpFormat ; Format オブジェクト 削除
		tmpFormat = 0
	}
	return

#define global alDrawText(%1="", %2=0, %3=0, %4=9999, %5=9999, %6=0, %7=0)	alDrawText_ %1, %2, %3, %4, %5, %6, %7

;-----------------------------------------------------------
#deffunc alDrawLine int p1, int p2, int p3, int p4
	if imgValid : GdipDrawLineI imgGraphics, imgPen,  p1, p2, p3, p4
	return

;-----------------------------------------------------------
#deffunc alDrawRect_ int p1, int p2, int p3, int p4
	if imgValid : GdipDrawRectangleI imgGraphics, imgPen,  p1, p2, p3, p4
	return

#deffunc alFillRect_ int p1, int p2, int p3, int p4
	if imgValid : GdipFillRectangleI imgGraphics, imgBrush,  p1, p2, p3, p4
	return

#deffunc alDrawEllip_ int p1, int p2, int p3, int p4
	if imgValid : GdipDrawEllipseI imgGraphics, imgPen,  p1, p2, p3, p4
	return

#deffunc alFillEllip_ int p1, int p2, int p3, int p4
	if imgValid : GdipFillEllipseI imgGraphics, imgBrush,  p1, p2, p3, p4
	return

#define global alDrawRect(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d)	alDrawRect_ %1, %2, %3, %4
#define global alFillRect(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d)	alFillRect_ %1, %2, %3, %4
#define global alDrawEllip(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d)	alDrawEllip_ %1, %2, %3, %4
#define global alFillEllip(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d)	alFillEllip_ %1, %2, %3, %4

;-----------------------------------------------------------
#deffunc alDrawLines var p1, int p2
	if imgValid : GdipDrawLinesI imgGraphics, imgPen,  varptr(p1), p2
	return

#deffunc alDrawPoly var p1, int p2
	if imgValid : GdipDrawPolygonI imgGraphics, imgPen,  varptr(p1), p2
	return

#deffunc alFillPoly var p1, int p2
	if imgValid : GdipFillPolygonI imgGraphics, imgBrush,  varptr(p1), p2, 1;FillModeWinding
	return

#deffunc alDrawCurve_ var p1, int p2, double p3
	if imgValid : GdipDrawCurve2I imgGraphics, imgPen,  varptr(p1), p2, p3
	return

#deffunc alDrawClosedCurve_ var p1, int p2, double p3
	if imgValid : GdipDrawClosedCurve2I imgGraphics, imgPen,  varptr(p1), p2, p3
	return

#deffunc alFillClosedCurve_ var p1, int p2, double p3
	if imgValid : GdipFillClosedCurve2I imgGraphics, imgBrush,  varptr(p1), p2, p3, 1;FillModeWinding
	return

#define global alDrawCurve(%1, %2, %3=0.5)	alDrawCurve_ %1, %2, %3
#define global alDrawClosedCurve(%1, %2, %3=0.5)	alDrawClosedCurve_ %1, %2, %3
#define global alFillClosedCurve(%1, %2, %3=0.5)	alFillClosedCurve_ %1, %2, %3

;-----------------------------------------------------------
#deffunc alDrawArc_ int p1, int p2, int p3, int p4, double p5, double p6
	if imgValid : GdipDrawArcI imgGraphics, imgPen,  p1, p2, p3, p4, p5, p6
	return

#deffunc alDrawPie_ int p1, int p2, int p3, int p4, double p5, double p6
	if imgValid : GdipDrawPieI imgGraphics, imgPen,  p1, p2, p3, p4, p5, p6
	return

#deffunc alFillPie_ int p1, int p2, int p3, int p4, double p5, double p6
	if imgValid : GdipFillPieI imgGraphics, imgBrush,  p1, p2, p3, p4, p5, p6
	return

#define global alDrawArc(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d, %5=0, %6=0)	alDrawArc_ %1, %2, %3, %4, %5, %6
#define global alDrawPie(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d, %5=0, %6=0)	alDrawPie_ %1, %2, %3, %4, %5, %6
#define global alFillPie(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d, %5=0, %6=0)	alFillPie_ %1, %2, %3, %4, %5, %6

;============================================================
;	座標変換モード
;============================================================

; Matrix Object
#uselib "Data/Plugins/core_2D.bin"
#func GdipCreateMatrix		"GdipCreateMatrix"	int
#func GdipCreateMatrix2		"GdipCreateMatrix2"	float, float, float, float, float, float, int
#func GdipDeleteMatrix		"GdipDeleteMatrix"	int
#func GdipTranslateMatrix	"GdipTranslateMatrix"	int, float, float, int
#func GdipRotateMatrix		"GdipRotateMatrix"	int, float, int
#func GdipScaleMatrix		"GdipScaleMatrix"	int, float, float, int

;-----------------------------------------------------------
#deffunc alResetTransMode
	if imgValid : GdipResetWorldTransform imgGraphics
	return

;-----------------------------------------------------------
#deffunc alTransModeMatrix double m11, double m12, double m21, double m22, double dx, double dy
	if imgValid {
		GdipCreateMatrix2 m11, m12, m21, m22, dx, dy, varptr(tmpMatrix)

		GdipSetWorldTransform imgGraphics, tmpMatrix
		GdipDeleteMatrix tmpMatrix
		tmpMatrix = 0
	}
	return

;-----------------------------------------------------------
#deffunc alTransModeOffsetRotateZoom_ int dx, int dy, double pa, double sx, double sy
	if imgValid {
		GdipCreateMatrix varptr(tmpMatrix)
		GdipTranslateMatrix tmpMatrix, dx, dy, 0 ; order = MatrixOrderPrepend = 0
		GdipRotateMatrix tmpMatrix, pa, 0
		GdipScaleMatrix tmpMatrix, sx, sy, 0

		GdipSetWorldTransform imgGraphics, tmpMatrix
		GdipDeleteMatrix tmpMatrix
		tmpMatrix = 0
	}
	return

#define global alTransModeOffsetRotateZoom(%1=0, %2=0, %3=0, %4=1, %5=1)	alTransModeOffsetRotateZoom_ %1, %2, %3, %4, %5

;-----------------------------------------------------------
#deffunc alTransModeRotateAt double pa, int px, int py
	if imgValid {
		GdipCreateMatrix varptr(tmpMatrix)
		GdipTranslateMatrix tmpMatrix, px, py, 0 ; order = MatrixOrderPrepend = 0
		GdipRotateMatrix tmpMatrix, pa, 0
		GdipTranslateMatrix tmpMatrix, -px, -py, 0

		GdipSetWorldTransform imgGraphics, tmpMatrix
		GdipDeleteMatrix tmpMatrix
		tmpMatrix = 0
	}
	return

#global
#endif

// ------------------------------------------------------------ //
//
// モジュール変数：〜をするモジュール
//
// ローカル変数  ：
//           int hogehoge : hogehoge
//
// 機能説明：hogehoge
//           hogehoge
//
// ------------------------------------------------------------ //

#ifndef __ARTLET2D_PLUS__
#define global __ARTLET2D_PLUS__
#module

////////////////////////////////////////////////////////////////
// 
//   外部DLL呼び出し命令登録
// 
////////////////////////////////////////////////////////////////

// #const global 
// #enum  global 

#uselib "Data/Plugins/core_2D.bin"
#func GdipCreatePath       "GdipCreatePath" int, int
#func GdipDeletePath       "GdipDeletePath" int
#func GdipClosePathFigures "GdipClosePathFigures" int
#func GdipSetPathFillMode  "GdipSetPathFillMode"  int, int
#func GdipFillPath         "GdipFillPath" int, int, int
#func GdipDrawPath         "GdipDrawPath" int, int, int
#func GdipAddPathLine      "GdipAddPathLine" int, float, float, float, float
#func GdipAddPathArc       "GdipAddPathArc"  int, float, float, float, float, float, float
#func GdipGetPenWidth      "GdipGetPenWidth" int, int
#func GdipCreatePen1       "GdipCreatePen1"  int, float, int, int
#func GdipSetPenLineJoin   "GdipSetPenLineJoin" int, int


// キャップスタイルの変更
#uselib "Data/Plugins/core_2D.bin"
#func GdipSetPenStartCap "GdipSetPenStartCap" int, int
#func GdipSetPenEndCap   "GdipSetPenEndCap"   int, int

// String Format Object
#uselib "Data/Plugins/core_2D.bin"
#func GdipCreateStringFormat	"GdipCreateStringFormat"	int, int, int
#func GdipDeleteStringFormat	"GdipDeleteStringFormat"	int
#func GdipSetStringFormatAlign	"GdipSetStringFormatAlign"	int, int
#func GdipSetStringFormatLineAlign "GdipSetStringFormatLineAlign"	int, int

// 文字列の描画とサイズ取得
#uselib "Data/Plugins/core_2D.bin"
#func GdipDrawString		"GdipDrawString"	int, wstr, int, int, int, int, int
#func GdipMeasureString     "GdipMeasureString" int, wstr, int, int, int, int, int, int, int

// ------------------------------------------------------------ //
// tools

// 指定された文字列の長さを取得
#uselib "kernel32"
#cfunc alWstrlen "lstrlenW" wptr


// ------------------------------------------------------------ //
// float -> double 変換
// 参考資料：http://sprocket.babyblue.jp/html/hsp_koneta3.htm
// ------------------------------------------------------------ //
#defcfunc todouble int p1
	temp = 0.0
	lpoke temp, 4, (p1 & 0x80000000) | (((p1 & 0x7fffffff) >> 3) + ((p1 & 0x7fffffff) ! 0) * 0x38000000)
	lpoke temp, 0, p1 << 29
	return temp



// ------------------------------------------------------------ //
//
// 命  令  ：alGdipSetPenCap
//
// 引  数  ：int p_s : 開始点のキャップスタイル
//           int p_e : 終了点のキャップスタイル
//
// 機能説明：線の末端スタイルを変更
//
//           線の末端スタイルを変更し、矢印にしたり丸くしたりすることが出来ます。
//           開始点、終了点のキャップスタイルを一度に設定できます。
//           結果はalDrawLine命令やalDrawLines命令を使用する際に反映されます。
//           
//           引数を省略または-1を設定すると設定を変更しません。
//
//
//  0 (0x00) : Flat          平坦なライン キャップ
//  1 (0x01) : Square        四角形のライン キャップ
//  2 (0x02) : Round         丸いライン キャップ
//  3 (0x03) : Triangle      三角形のライン キャップ
// 16 (0x10) : NoAnchor      アンカー キャップなし
// 17 (0x11) : SquareAnchor  四角形のアンカー キャップ
// 18 (0x12) : RoundAnchor   丸いアンカー キャップ
// 19 (0x13) : DiamondAnchor 菱形のアンカー キャップ
// 20 (0x14) : ArrowAnchor   矢印形のアンカー キャップ
//
// ------------------------------------------------------------ //
#deffunc alGdipSetPenCap_ int p_s, int p_e
	if imgValid@a2d {
		if p_s >= 0 : GdipSetPenStartCap imgPen@a2d, p_s
		if p_e >= 0 : GdipSetPenEndCap   imgPen@a2d, p_e
	}
	return
#define global alGdipSetPenCap(%1=-1, %2=-1)	alGdipSetPenCap_ %1, %2




// ------------------------------------------------------------ //
//
// 命  令  ：alGdipSetPenLineJoin
//
// 引  数  ：LineJoin	: 結合方法
//
// 返り値  ：なし
//
// 機能説明：連続した線を結合する方法を指定
//
//           設定結果はalDrawPoly命令などに反映されます。
//           Artlet2Dでは初期値は 0（Miter）です。
//           
//           
//           LineJoin = 0（初期値）
//           Miter：
//           鋭角接合を指定します。
//           マイタ長がマイタ制限値を超えない場合、鋭角的な角で結合されます。
//           マイタ長がマイタ制限値を超える場合、角の先端がカットされます。
//           
//           LineJoin = 1
//           Bevel：
//           面取り接合を指定します。
//           角は斜めにカットされます。カットされる位置は中心線の頂点位置です。
//           
//           LineJoin = 2
//           Round：
//           角丸接合を指定します。
//           角は丸く円弧で結合されます。
//           
//           LineJoin = 3
//           MiterClipped：
//           鋭角接合を指定します。
//           マイタ長がマイタ制限値を超えない場合、鋭角的な角で結合されます。
//           マイタ長がマイタ制限値を超える場合、Bevelで結合されます。
//           
//
// ------------------------------------------------------------ //
#deffunc alGdipSetPenLineJoin int p_j
	if imgValid@a2d {
		GdipSetPenLineJoin imgPen@a2d, p_j
	}
	return






// ------------------------------------------------------------ //
//
// 命  令  ：alDrawRoundRect
//
// 引  数  ：x, y	: 矩形の左上座標
//           w, h	: 矩形のサイズ
//           r      : 角丸半径
//
// 返り値  ：なし
//
// 機能説明：角丸矩形の描画（塗りつぶしなし）
//           引数で指定した位置・サイズの角丸矩形を描画します。
//
//           この矩形は、塗りつぶしではなく線で枠を描画した図形です。
//           alPenWidth で太さを設定できます。
//
// ------------------------------------------------------------ //
// Rounded Rectangle
#deffunc alDrawRoundRect int p_x, int p_y, int p_w, int p_h, int p_r
	if imgValid@a2d {

		;パス作成
		GdipCreatePath 0,varptr(path)

		// 角半径の閾値
		r = p_r
		if r < 0 {
			r = 0
		} else {
			if r > p_w/2 : r = p_w/2
			if r > p_h/2 : r = p_h/2
		}

		// パスを作成
		if r = 0 {
			GdipAddPathLine path, p_x    , p_y    , p_x+p_w, p_y
			GdipAddPathLine path, p_x+p_w, p_y+p_h, p_x    , p_y+p_h
		} else {
			GdipAddPathArc path, p_x + p_w - r*2, p_y + p_h - r*2, r*2, r*2,   0-5, 90+10	// 右下
			GdipAddPathArc path, p_x            , p_y + p_h - r*2, r*2, r*2,  90-5, 90+10	// 左下
			GdipAddPathArc path, p_x            , p_y            , r*2, r*2, 180-5, 90+10	// 左上
			GdipAddPathArc path, p_x + p_w - r*2, p_y            , r*2, r*2, 270-5, 90+10	// 右上
		}
	
		;完成
		GdipClosePathFigures path
		;塗りつぶしなし
		GdipDrawPath imgGraphics@a2d, imgPen@a2d, path
		GdipDeletePath path

		return 0
	}
	return -1




// ------------------------------------------------------------ //
//
// 命  令  ：alFillRoundRect
//
// 引  数  ：x, y	: 矩形の左上座標
//           w, h	: 矩形のサイズ
//           r      : 角丸半径
//
// 返り値  ：なし
//
// 機能説明：塗りつぶし角丸矩形の描画
//           引数で指定した位置・サイズの角丸矩形を描画します。
//
// ------------------------------------------------------------ //
// Rounded Rectangle
#deffunc alFillRoundRect int p_x, int p_y, int p_w, int p_h, int p_r
	if imgValid@a2d {

		;パス作成
		GdipCreatePath 0,varptr(path)
	
		// 角半径の閾値
		r = p_r
		if r < 0 {
			r = 0
		} else {
			if r > p_w/2 : r = p_w/2
			if r > p_h/2 : r = p_h/2
		}

		// パスを作成
		if r = 0 {
			GdipAddPathLine path, p_x    , p_y    , p_x+p_w, p_y
			GdipAddPathLine path, p_x+p_w, p_y+p_h, p_x    , p_y+p_h
		} else {
			GdipAddPathArc path, p_x + p_w - r*2, p_y + p_h - r*2, r*2, r*2,   0-5, 90+10	// 右下
			GdipAddPathArc path, p_x            , p_y + p_h - r*2, r*2, r*2,  90-5, 90+10	// 左下
			GdipAddPathArc path, p_x            , p_y            , r*2, r*2, 180-5, 90+10	// 左上
			GdipAddPathArc path, p_x + p_w - r*2, p_y            , r*2, r*2, 270-5, 90+10	// 右上
		}
	
		;完成
		GdipClosePathFigures path
		;塗りつぶし
		GdipFillPath imgGraphics@a2d, imgBrush@a2d, path
		GdipDeletePath path

		return 0
	}	
	return -1




// ------------------------------------------------------------ //
//
// 命  令  ：alFillRoundRectLine
//
// 引  数  ：x, y	: 矩形の左上座標
//           w, h	: 矩形のサイズ
//           r      : 角丸半径
//           argb1	:内側の色（0xAARRGGBB）
//           argb2	:線の色（0xAARRGGBB）
//
// 返り値  ：なし
//
// 機能説明：角丸矩形の描画（枠＋塗りつぶし）
//           引数で指定した位置・サイズの角丸矩形を描画します。
//           この角丸矩形は、線で枠を描画し内側を塗りつぶします。
//
//           色はArtlet2Dの内蔵のマクロ ARGB(A, R, G, B) もしくは RGBA(R, G, B, A) を使用すると、値を簡単に記述できます。
//
// ------------------------------------------------------------ //
// Rounded Rectangle
#deffunc alFillRoundRectLine int p_x, int p_y, int p_w, int p_h, int p_r, int p_argb1, int p_argb2

	if imgValid@a2d {
		// -----------------------
		//   ペン太さを取得
		// -----------------------
		b = 0
		GdipGetPenWidth imgPen@a2d, varptr(b)	; 旧ペンの Width を保存
		border = todouble(b)


		// -----------------------
		//   内側
		// -----------------------
		i = int(border/2)
		x = p_x - i
		y = p_y - i
		w = p_w + i*2
		h = p_h + i*2
		rr = p_r + i
		
		a = (p_argb1 & 0xFF000000) >>24
		r = (p_argb1 & 0x00FF0000) >>16
		g = (p_argb1 & 0x0000FF00) >> 8
		b = (p_argb1 & 0x000000FF)
		alColor r,g,b,a
		alFillRoundRect x, y, w, h, rr
		
		
		// -----------------------
		//   外側
		// -----------------------
		x = p_x
		y = p_y
		w = p_w
		h = p_h
		
		// border=0 以下は描画しない
		a = (p_argb2 & 0xFF000000) >>24
		r = (p_argb2 & 0x00FF0000) >>16
		g = (p_argb2 & 0x0000FF00) >> 8
		b = (p_argb2 & 0x000000FF)
		alColor r,g,b,a
		alDrawRoundRect x, y, w, h, p_r
	}

	return



// ------------------------------------------------------------ //
//
// 命  令  ：alDrawTextP
//
// 引  数  ：bRect  : 描画位置とサイズを受け取る配列変数
//           fdraw  : 描画ON/OFFフラグ(1)
//           "str"  : 描画する文字列
//           px, py : 描画する位置 (0, 0)
//           w, h   : 描画領域の幅と高さ (9999, 9999)
//           ax, ay : アラインメント モード (0, 0)
//
// 返り値  ：なし
//
// 機能説明：仮想イメージに文字列を描画し、その位置とサイズを取得
//
//           仮想イメージに文字列を描画し、その位置とサイズを取得します。
//           
//           bRect
//           描画される文字列の位置とサイズがdouble型の値で返されます。内容は次の通り。
//           bRect(0) = 描画する位置 X座標
//           bRect(1) = 描画する位置 Y座標
//           bRect(2) = 描画領域の幅
//           bRect(3) = 描画領域の高さ
//           使用する前に
//           ddim bRect,4
//           として配列変数を初期化しておいてください。
//           
//           
//           fdraw = 0
//           文字列の描画を行いません。
//           
//           fdraw = 1（省略時）
//           文字列の描画を行います。
//           結果はalDrawText命令と同じ動作に成ります。
//           
//           "str"以降はalDrawText命令と同じ内容を指定してください。
//
// ------------------------------------------------------------ //
#deffunc alDrawTextP_ array bRect, int fdraw, str p1, int px, int py, int pw, int ph, int pah, int pav
	if imgFont@a2d {
		GdipCreateStringFormat 0, 0, varptr(tmpFormat) ; アラインメント用 Format オブジェクト
		GdipSetStringFormatAlign tmpFormat, pah
		GdipSetStringFormatLineAlign tmpFormat, pav

		rectf = alFloat(px), alFloat(py), alFloat(pw), alFloat(ph)
		// 描画
		if fdraw ! 0 {
			GdipDrawString imgGraphics@a2d, p1, alWstrlen(p1), imgFont@a2d, varptr(rectf), tmpFormat, imgBrush@a2d
		}
	
		// 位置とサイズを取得
		dim br, 4
		a = 0 : b = 0
		GdipMeasureString imgGraphics@a2d, p1, alWstrlen(p1), imgFont@a2d, varptr(rectf), tmpFormat, varptr(br), varptr(a), varptr(b)
		repeat 4
			bRect(cnt) = todouble(br(cnt))
		loop
		
		GdipDeleteStringFormat tmpFormat ; Format オブジェクト 削除
		tmpFormat = 0
	}
	return
#define global alDrawTextP(%1, %2=1, %3="", %4=0, %5=0, %6=9999, %7=9999, %8=0, %9=0)	alDrawTextP_ %1, %2, %3, %4, %5, %6, %7, %8, %9




#global
#endif	;__ARTLET2D_PLUS__

